#!/bin/bash
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

readonly argv0=aurbuild
readonly pwd=$PWD

repofind() {
    #global target pool
    declare repo path

    while {
	read -r repo
	read -r _ _ path
    } do
	if [[ $path =~ ^file:// ]]; then
	    repo=${repo%\]}
            repo=${repo#\[}
            path=${path#file://}

            declare -A rset[$repo]=$path
	fi
    done < <(pacconf --single | awk '/^\[/ && !/options/ || /Server/')

    if [[ ${rset[@]} ]]; then
        if ((${#rset[@]} > 1)); then
            select target in "${!rset[@]}"; do
                break
            done
        else
            target=${!rset[*]}
        fi
        msg "Using [$target] repository"
        pool=${rset[$target]}
    else
        error "No file:// repository found"
        exit 1
    fi
}

build() {
    if PACMAN="${cmd:-pacman}" PKGDEST="$pool" LC_MESSAGES=C makepkg -Lsc; then
        if repose -vf "$target".db -r "$pool" -p "$pool"; then
            # https://github.com/AladW/aurutils/issues/19
            sudo pacsync "$target"
        else
            return
        fi
    else
        return
    fi
}

trap 'exit' INT

source /usr/share/makepkg/util.sh || exit 1
source /etc/makepkg.conf || exit 1

[[ -t 2 ]] && colorize

# https://bugs.archlinux.org/task/42601
if [[ -r $1 ]]; then
    exec 3< "$1"
else
    error "$1: not readable (queue)"
    exit 1
fi

repofind

# https://bugs.archlinux.org/task/48497
if [[ $PKGDEST ]] && [[ $PKGDEST != $pool ]]; then
    warning "PKGDEST does not match repository path"
fi

hash powerpill 2>/dev/null && cmd=powerpill

while read -r -u 3 p; do
    if cd "$pwd/$p"; then
        build || break
    fi
done

exec 3<&-

# vim: set sw=4 sts=4:

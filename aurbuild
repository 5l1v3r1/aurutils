#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

readonly argv0=aurbuild
readonly pwd=$PWD

repofind() {
    #global target pool
    declare repo path
    declare -A rset

    while {
	read -r repo
	read -r _ _ path
    } do
	if [[ $path =~ ^file:// ]]; then
	    repo=${repo%\]}
            repo=${repo#\[}
            path=${path#file://}
            rset[$repo]=$path
	fi
    done < <(pacconf --single | awk '/^\[/ && !/options/ || /Server/')

    if [[ ${rset[@]} ]]; then
        if ((${#rset[@]} > 1)); then
            select target in "${!rset[@]}"; do
                break
            done
        else
            target=${!rset[*]}
        fi

        msg "Using [$target] repository"
        pool=${rset[$target]}
    else
        error "No file:// repository found"
        exit 1
    fi
}

build() {
    if PKGDEST="$pool" LC_MESSAGES=C makepkg -Lsc; then
        if repose -vf "$target".db -r "$pool" -p "$pool"; then
            # https://github.com/AladW/aurutils/issues/19
            sudo pacsync "$target"
        else
            return 1
        fi
    else
        return 1
    fi
}

build_chroot() {
    declare CHROOT=/var/cache/aurbuild

    if [[ ! -d $CHROOT/root ]]; then
	if sudo mkarchroot -C /etc/pacman.conf "$CHROOT"/root base base-devel; then
	    return 1
	fi
    fi

    if sudo -E PKGDEST="$pool" makechrootpkg -d "$pool" -u -r "$CHROOT"; then
	if ! repose -vf "$target".db -r "$pool" -p "$pool"; then
	    return 1
	fi
    else
	return 1
    fi
}

trap 'exit' INT

source /usr/share/makepkg/util.sh || exit 1

[[ -t 2 ]] && colorize

# Preserve terminal input for makepkg/select (#21)
if [[ -r $1 ]]; then
    exec 3< "$1"
else
    error "$1: not readable (queue)"
    exit 1
fi

repofind

while read -r -u 3 p; do
    if cd "$pwd/$p"; then
        build_chroot || break
    fi
done

exec 3<&-

# vim: set sw=4 sts=4:

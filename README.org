#+STARTUP: indent
* NAME

aurutils - helper tools for the arch user repository

* PROGRAMS

The below gives a short overview; see the respective documentation for details.

*** aurbuild

Build packages to a local repository. Local or nspawn builds are possible.

*** aurchain

Solve and order dependencies using the AUR RPC.

*** aurqueue

Order dependencies using ~.SRCINFO~ files.

*** aursearch

Search AUR package names by a PCRE pattern.

*** aursift

Filter packages in the Arch Linux repositories.

*** aursync

Download and build AUR packages automatically.

*** repofind

Display information on ~file://~ repositories.

*** repoman

Run pacman, only considering the official repositories.

* EXIT STATUS

Programs follow a subset of ~errno(3)~, or preserve command status where applicable.

| Exit | Description                   |
|------+-------------------------------|
|    1 | Operation not permitted       |
|    2 | No such file or directory     |
|   13 | Permission denied             |
|   20 | Not a directory               |
|   22 | Invalid argument              |
|   34 | Numerical result out of range |
|   61 | No data available             |

See also ~EXIT STATUS~ in ~curl(1)~, ~aria2c(1)~.

* NOTES

** Creating a local repository

#+BEGIN_SRC 
$ sudo vim /etc/pacman.conf # uncomment [custom], change Server to suit
$ sudo install -d /home/packages -o $USER -m 700
$ repo-add /home/packages/custom.db.tar
$ sudo pacman -Syu
#+END_SRC

| Warning: | Avoid naming the repository `local`, as this name is reserved by pacman.                                                        |
|          | AUR packages migrate regularly to the official repositories. Where possible, add local repositores to the *end* of pacman.conf. |
| Tip:     | Consider using separate repositories for different purposes, such as version control packages.                                  |

** Migrating foreign packages (optional)

This is straightforward if the built packages are still available, for example in ~/home/packages~:

#+BEGIN_SRC 
$ cd /home/packages
$ repose -fv custom.db
$ sudo pacman -Syu
#+END_SRC

To reverse this operation, repeat the procedure with ~--drop~:

#+BEGIN_SRC 
$ repose -dfv custom.db
#+END_SRC

Without packages, check the installed files first. If needed, rebuild packages with md5sum mismatches.

#+BEGIN_SRC 
$ pacman -Qqm | paccheck --md5sum --quiet
#+END_SRC

Recreate the packages, and save them to PKGDEST, or PWD if not set:

#+BEGIN_SRC
$ for b in $(pacman -Qqm); do bacman "$b"; done
#+END_SRC

To check for AUR updates, use ~repofind -u custom~ or ~aursync -u~.

Alternatively, use the ~repoman~ script with helpers which honor the ~PACMAN~ variable, e.g. ~PACMAN=repoman pacaur -Syu~, or the ~--ignorerepo~ flag for ~cower~. Unlike ~repofind~, these only check updates for installed packages.

To keep the repository updated when building with other AUR helpers, set ~PKGDEST~ and create a repose alias:

#+BEGIN_SRC
$ sudo vim /etc/makepkg.conf
$ alias custom='repose -vf custom.db -p /home/packages -r /home/packages'
#+END_SRC

* EXAMPLES

Run actions on AUR targets in total order:

#+BEGIN_SRC 
$ while read -r pkg _; do ... done < <(aurchain foobar)
#+END_SRC

Build all packages in the /pkgbuilds/ github repository:

#+BEGIN_SRC 
$ git clone https://www.github.com/Earnestly/pkgbuilds
$ cd pkgbuilds
$ find -maxdepth 2 -name PKGBUILD -execdir mksrcinfo \;
$ aurqueue * > queue # Remove unwanted targets
$ aurbuild -d custom.db -r /home/packages -p /home/packages -a queue
#+END_SRC

Search for Haskell modules that are neither in the AUR or official repositories:

#+BEGIN_SRC 
$ aurchain -v aura >pkgs 3>copy
$ grep -Fxvf pkgs <(aursift -S < copy)
#+END_SRC

Build plasma-desktop-git and its dependencies in an nspawn container:

#+BEGIN_SRC 
$ aursync -c plasma-desktop-git
#+END_SRC

Download and view build files recursively:

#+BEGIN_SRC 
$ aursync -dn libunity
#+END_SRC

Build all AUR updates in a selected repository:

#+BEGIN_SRC 
$ aursync -u
#+END_SRC

Print AUR updates in the /custom/ repository (output similar to ~checkupdates~):

#+BEGIN_SRC 
$ repofind -u custom
#+END_SRC

* BUGS

Before filing a bug, check the following:

+ Do you use the latest version of aurutils and its dependencies?
+ Does the package conform to PKGBUILD(5) and the AUR package guidelines?
+ Does the package provide the correct metadata on the AUR RPC interface?
+ Does the package build with ~makepkg -s~ ?
+ Is the problem reproducible, and not due to a misconfiguration of pacman, makepkg, sudoers, gpg or others?

If yes to all, attach a debug log (~bash -x scriptname |& tee error.log~) and open a new issue at:

https://www.github.com/AladW/aurutils/issues

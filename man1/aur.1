'\" t
.TH AUR 1 2016-12-25 AURUTILS
.SH NAME
aur \- helper tool for the arch user repository

.SH PROGRAMS
The below gives a short overview; see the respective documentation for
details.
.P
.BR aur\-graph (1)
.RS 4
Print package/dependency pairs.
.RE

.P
.BR aur\-build (1)
.RS 4
Build packages to a local repository.
.RE

.P
.BR aur\-chroot (1)
.RS 4
Build packages inside a chroot.
.RE

.P
.BR aur\-depends (1)
.RS 4
Order package dependencies using AurJson.
.RE

.P
.BR aur\-fetch (1)
.RS 4
Retrieve build files from the AUR.
.RE

.P
.BR aur\-pkglist (1)
.RS 4
Print the AUR package list.
.RE

.P
.BR aur\-repo\-filter (1)
.RS 4
Filter packages in the Arch Linux repositories.
.RE

.P
.BR aur\-search (1)
.RS 4
Search for AUR packages.
.RE

.P
.BR aur\-srcver (1)
.RS 4
Update and print package revisions.
.RE

.P
.BR aur\-sync (1)
.RS 4
Download and build AUR packages automatically
.RE

.P
.BR aur\-vercmp (1)
.RS 4
Check packages for AUR updates.
.RE

.SH EXIT STATUS
Programs follow a subset of errno(3), or preserve command status where
applicable.

.SH CREATING A LOCAL REPOSITORY
A local repository may be configured directly in
.BR /etc/pacman.conf ,
or in a separate file specified with the
.B Include
directive. This section documents an example configuration; for
details, consult the
.BR pacman.conf (5)
man page.
.SY Note:
Avoid naming the repository
.IR local ,
as this name is reserved by
.BR pacman (1).

.SY Note:
It is recommended to use a pacman cache directory
.RB ( CacheDir )
as the package pool. This avoids checksum mismatches between built
packages and any cached versions.
.YS

.SY Tip:
Consider separate repositories for different purposes, such as
version control packages.
.YS

.SS Pacman configuration
.P
If the local repository
.I custom
is located in
.IR /var/cache/pacman/custom ,
create
.IR /etc/pacman.d/custom
with the following contents:
.EX

  [options]
  CacheDir = /var/cache/pacman/pkg
  CacheDir = /var/cache/pacman/custom
  CleanMethod = KeepCurrent

  [custom]
  SigLevel = Optional TrustAll
  Server = file:///var/cache/pacman/custom

.EE
Include the configuration in
.IR /etc/pacman.conf :
.EX

  # An example of a custom package repository.  See the pacman manpage for
  # tips on creating your own repositories.
  Include = /etc/pacman.d/custom

.EE
Add
.B Include\fR to the \fIend\fR of pacman.conf, where possible.

.SS Adding packages
Create the repository root and database:
.EX

  $ sudo install -d /var/cache/pacman/custom -o $USER
  $ repo-add /var/cache/pacman/custom/custom.db.tar

.EE
If built packages are available, add them to the database:
.EX

  $ cd /var/cache/pacman/custom
  $ repo-add -n custom.db.tar ./*.pkg.tar.xz

.EE
Synchronize pacman:
.EX

  $ sudo pacman -Syu

.EE

.SH EXAMPLES
Examples below assume
.BR bash (1)
is the interactive shell.

.SS Arch User Repository
Run actions on the dependency tree of an AUR package:
.EX

  $ echo foo | aur depends | while read -r pkg; do ... done

.EE
Build
.I plasma-desktop-git
and its dependencies with
.BR systemd\-nspawn (1):
.EX

  $ aur sync -c plasma-desktop-git

.EE
Update all AUR packages in a single local repository:
.EX

  $ aur sync -u

.EE
Check foreign packages for AUR updates:
.EX

  $ pacman -Qm | aur vercmp

.EE

.SS Arch User Repository - advanced usage
Print packages from the
.I custom
repository that are unavailable in the AUR:
.EX

  $ grep -Fxvf <(aur pkglist) <(pacman -Slq custom)

.EE
As above, but for orphaned packages:
.EX

  $ pacman -Slq custom | aur rpc -t info | \\
       jq -r '.[].results[] | select(.Maintainer == null)'

.EE
Update packages in the
.I custom
repository which are installed on the host:
.EX

  $ grep -Fxf <(pacman -Qq) <(pacman -Slq custom) > installed.txt
  $ xargs -a installed.txt aur sync --repo=custom

.EE
Search for AUR packages with both
.I wm
and
.I git
in the name:
.EX

  $ aur pkglist -P '(?=.*wm)(?=.*git)' | xargs aur search -i

.EE
Select an AUR package with name matching
.IR pony ,
and build the result:
.EX

  $ select a in $(aur pkglist -F pony); do aur sync "$a"; break; done

.EE

.SS Official repositories
.EE
Print Perl modules that are both in the AUR and official repositories:
.EX

  $ aur pkglist -P '^perl-.+' > perl.txt
  $ grep -Fxf <(aur repo-filter < perl.txt) perl.txt

.EE
Print packages both in AUR and
.I [community]
and compare their versions:
.EX

  $ aur repo -d community --all

.EE

.SS Using PKGBUILDs
Build packages in the
.I pkgbuilds
github repository (generating required
.B .SRCINFO
files):
.EX

  $ git clone https://www.github.com/Earnestly/pkgbuilds
  $ cd pkgbuilds
  $ find -name PKGBUILD -execdir sh -c 'makepkg --printsrcinfo > .SRCINFO' \\;

  $ aur graph */.SRCINFO | tsort | tac > queue # Remove unwanted targets
  $ aur build -a queue

Build a package for a different architecture, here \fIi686\fR:
.EX

  $ setarch i686 aur sync -c --repo=custom_i686 tclkit

.EE

.SS Using third-party helpers
Repository packages can be "made foreign" by temporarily removing the
repository from the pacman configuration. This can be used with programs
that support the
.B PACMAN
environment variable and check foreign packages for AUR updates.

For example, create the
.I mypacman
script in
.IR /usr/local/bin/mypacman :
.EX

 #!/bin/sh
 pacman --config=/usr/share/devtools/pacman-extra.conf "$@"

.EE
and point the
.B PACMAN
variable towards it:
.EX

 $ export PACMAN=/usr/local/bin/mypacman

.EE

.SH AUTHORS
.MT https://github.com/AladW
Alad Wenter
.ME

.\" vim: set textwidth=72

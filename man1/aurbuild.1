.TH AURBUILD 1 2016-12-21 AURUTILS
.SH NAME
aurbuild \- build packages to a local repository

.SH SYNOPSIS
.SY aurbuild
.OP \-cs
.OP \-a queue
.OP \-d database
.OP \-r root
.OP \--
.OP "makepkg args"
.YS

.SH DESCRIPTION
Build packages, adding the results to a local repository (usually
configured with a \fIfile:// \fRprefix \fRin \fIpacman.conf\fR).

It is assumed that build directories are located in the current
directory, and described in a text file which is taken as argument.

.SH OPTIONS
All arguments after -- are passed to \fImakepkg\fR, or
\fImakechrootpkg \fRwhen \fI-c \fRis specified.

.B \-a
.RS
A text file with directories containing a PKGBUILD. If none is
specified, the current directory is assumed.
.RE

.B \-c
.RS
Build packages with \fImakechrootpkg\fR.
.RE

.B \-C
.RS
Set the parent directory of the nspawn container. Defaults to
\fI/var/lib/aurbuild\fR. Containers are kept in subdirectories named
after the system architecture, for example
\fI/var/lib/aurbuild/x86_64\fR.
.RE

.B \-d
.RS
The name of the pacman database.
.RE

.B \-r
.RS
The root for the repository. The \fBroot\fR is the location for the
pacman database (\fIfoo.db\fR), built packages, and secondary files such
as the files database (\fIfoo.files\fR). This defaults to the
\fIServer\fR value of the configured repository.
.RE

.B \-s
.RS
Sign built packages and the database with gpg.
.RE

.SH NOTES
When building locally (outside a container), \fIpacman -Syu \fR is run
while restricted to a local repository. This is comparable to
\fImakepkg -i\fR, but without subsequent package installation (if a
package was installed before, it is updated to the latest available
version). An interesting side-effect is that pacman considers packages
inside the official repositories "local", and warns if they are newer
than any custom counterpart. Packages which define a \fIreplaces\fR
field are ignored if the target package is installed on the local
system.

Databases are built with \fILANG=C\fR to avoid libalpm from skipping
entries if the locale is not set (FS#49342). Packages are signed
manually with \fIgpg --verbose --detach-sign --no-armor\fR (FS#49946).

.SS Building with \fBmakechrootpkg\fR
The template (or \fIroot\fR) container is upgraded with \fIpacman
-Syu\fR prior to building. This is done as the \fI$USER\fR container
is copied from the \fIroot\fR container before each build
(\fImakechrootpkg -c\fR).

Changes to the pacman database are \fBnot\fR propagated from the
container to the local system. Packages must be installed and updated
separately, typically through \fIpacman -Syu <package_name>\fR.

Package conflicts inside the container must be solved manually, as
\fBmakechrootpkg\fR uses \fImakepkg --confirm -s\fR internally. For
example, to replace \fBgcc\fR with \fBgcc-multilib\fR, run \fIarch-nspawn
/var/lib/aurbuild/root pacman -S gcc-multilib\fR as root.

Signature verification requires that \fBgpg2\fR(1) configuration is
stored in \fI~/.gnupg\fR. See Github issue #151 for details.

.SS Avoiding password prompts
makepkg must be run as a regular user as of version 4.2, with
privileged operations done via \fIsudo\fR. As such, \fIaurbuild\fR can
not be run directly as root. To avoid password prompts,
\fBsudoers\fR(5) can be used instead.

For example:
.EX

  %build localhost = (root) NOPASSWD: SETENV: /usr/bin/makechrootpkg
  %build localhost = (root) NOPASSWD: /usr/bin/arch-nspawn

.EE
Note that variables specified on the sudo command line (such as
\fIPKGDEST\fR by \fBaurbuild\fR) depend on sudo policy; see
\fBsudo\fR(8) and \fBsudoers\fR(5).

.SS Building for a different architecture
To build packages for a different architecture, prepend \fBsetarch
<arch>\fR to the aurbuild command line. The target architecture must
both be supported by the current system (run \fIsetarch --list\fR for an
approximation) and have a respective \fImakepkg.conf\fR file available
in \fI/usr/share/devtools\fR (such as
\fI/usr/share/devtools/makepkg-i686.conf\fR for \fIi686\fR).

As the pacman database generated by \fBrepose\fR contains packages for a
single architecture (and packages marked 'any') exclusively, consider
separate repositories for different architectures. For example:
.EX

  $ cd /home/aur/fsv2
  $ setarch i686 aurbuild -d custom-i686
  $ aurbuild -d custom-x86_64 # current architecture

.EE
Alternatively, specify the path to the repository root and pool on the
command line:
.EX

  $ setarch i686 aurbuild -d custom -r /var/cache/pacman/custom/i686
  $ aurbuild -d custom -r /var/cache/pacman/custom/x86_64

.EE
This assumes that the \fI$arch\fR variable is defined in the pacman
configuration.

.SH SEE ALSO
.BR pacconf (1),
.BR pacman (1),
.BR repose (1),
.BR makepkg.conf (5),
.BR pacman.conf (5),
.BR aurutils (7),
.BR makepkg (8),
.BR setarch (8)

.SH AUTHORS
.MT https://github.com/AladW
Alad Wenter
.ME

.\" vim: set textwidth=72:

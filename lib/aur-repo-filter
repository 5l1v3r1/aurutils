#!/bin/bash
# aur-repo-filter - filter packages in the Arch Linux repositories
readonly argv0=repo-filter
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
readonly arch_repo=(core extra testing community{,-testing} multilib{,-testing})

satisfies() {
    #global reposet
    xargs -0a <(printf -- '--satisfies=%s\0' "$@") pacsift "${reposet[@]}" <&-
}

usage() {
    printf >&2 'usage: %s [-d repo] [-a]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

opt_short='d:a'
opt_long=('all' 'database:')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset argv_repo reposet sync_repo fields
while true; do
    case "$1" in
        -a|--all)       sync_repo=1 ;;
        -d|--database)  shift; argv_repo+=("$1") ;;
        --dump-options) printf -- '--%s\n' "${opt_long[@]}" ;
                        printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                        exit ;;
        --) shift; break;;
    esac
    shift
done
unset opt_short opt_long OPTRET

if ((sync_repo)); then
    reposet=(--sync)
elif [[ -v argv_repo ]]; then
    reposet=(--exact "${argv_repo[@]/#/--repo=}")
else
    reposet=(--exact "${arch_repo[@]/#/--repo=}")
fi

# check for interactive terminal
if [[ -t 0 ]]; then
    cat >&2 <<EOF
Warning: Input is read from the terminal. You either know what you
Warning: are doing, or you forgot to pipe data into $argv0.
Warning: Press CTRL-D to exit.
EOF
fi

# associative array for input package names
declare -A pkgset

while IFS= read -r package; do
    pkgset[$package]=1
done

# use xargs -a to bypass isatty() check
if [[ ${pkgset[*]} ]]; then
    satisfies "${!pkgset[@]}" | expac '%n %R %S' -Sv - | while read -ra line; do
        package=${line[0]#*/}

        if [[ ${pkgset[$package]} ]]; then
            printf '%s\n' "$package"
        fi

        for ((i = 1; i < ${#line[@]}; i++)); do
            virtual=${line[$i]}

            if [[ ${pkgset[$virtual]} ]]; then
                plain "virtual dependency $virtual satisfied by $package" >&2
                printf '%s\n' "$virtual"
            fi
        done
    done
fi

# vim: set et sw=4 sts=4 ft=sh:

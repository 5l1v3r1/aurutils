#!/bin/bash
# aur-repo-filter - filter packages in the Arch Linux repositories
readonly argv0=repo-filter
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
readonly arch_repo=(core extra testing community{,-testing} multilib{,-testing})

provides() {
    expac '%n %R %S' -Sv - | awk '{
        for(i = 2; i <= NF; ++i)
            printf("%s %s\n", $1, $i)
    }'
}

xargs_sift() {
    xargs -0 pacsift --sync --exact "$@" <&- | provides | sort -u
}

usage() {
    printf >&2 'usage: %s [-a] [-d repo]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

opt_short='ad:h'
opt_long=('all' 'repo' 'database' 'help')

if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset argv_repo reposet
while true; do
    case "$1" in
        -a|--all)
            mapfile -t argv_repo < <(pacconf --repo-list) ;;
        -d|--repo|--database)
            shift; argv_repo+=("$1") ;;
        -h|--help)
            usage ;;
        --) shift; break;;
    esac
    shift
done
unset opt_short opt_long OPTRET

if [[ -v argv_repo ]]; then
    reposet=("${argv_repo[@]}")
else
    reposet=("${arch_repo[@]}")
fi

declare -A pkgset

while IFS= read -r; do
    pkgset[$REPLY]=1
done

if [[ -n ${pkgset[*]} ]]; then
    printf '--satisfies=%s\0' "${!pkgset[@]}" | xargs_sift "${reposet[@]}" | while
        read -r pkg vrt
    do
        pkg=${pkg#*/}

        if [[ ${pkgset[$pkg]} ]]; then
            printf '%s\n' "$pkg"
        fi

        if [[ ${pkgset[$vrt]} ]]; then
            plain 'virtual dependency %s provided by %s\n' "$vrt" "$pkg"
            printf '%s\n' "$vrt"
        fi
    done
fi

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
# aur-repo-filter - filter packages in the Arch Linux repositories
readonly argv0=repo-filter
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
readonly arch_repo=(core extra testing community{,-testing} multilib{,-testing})

# Standard input is taken as "provides[<cmp><version>]", where pacsift
# checks for a package satisfying this condition. Results are printed
# as "repository/package", and piped to expac to relate the names of
# the original provides to its corresponding package(s).
provides() {
    pacsift "$@" <&- | expac '%n %R %S' -Sv -
}

usage() {
    printf >&2 'usage: %s [-d repo] [-S]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

opt_short='d:S'
opt_long=('sync' 'database:' 'repo:')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset argv_repo sync_repo sift_args
while true; do
    case "$1" in
        -d|--database|--repo)
            shift; argv_repo+=("$1") ;;
        -S|--sync)
            sync_repo=1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ;
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
            exit ;;
        --) shift; break;;
    esac
    shift
done
unset opt_short opt_long OPTRET

if ((sync_repo)); then
    sift_args+=(--sync)
elif [[ -v argv_repo ]]; then
    sift_args+=(--exact "${argv_repo[@]/#/--repo=}")
else
    sift_args+=(--exact "${arch_repo[@]/#/--repo=}")
fi

# check for interactive terminal
if [[ -t 0 ]]; then
    cat >&2 <<EOF
Warning: Input is read from the terminal. You either know what you
Warning: are doing, or you forgot to pipe data into $argv0.
Warning: Press CTRL-D to exit.
EOF
fi

# associative array for input package names
declare -A pkgset

while IFS= read -r str; do
    # store unversioned string as key
    name=${str%%[<>=]*}

    # store version + operator as value (1 if unavailable)
    if ((${#str} - ${#name})); then
        pkgset[$name]=${str:${#name}}
    else
        pkgset[$name]=1
    fi

    # XXX: This command line will hit ARG_MAX on approximately 70k
    # packages. xargs results in empty output (regardless of -a or
    # '<&-'), parallel -X is significantly slower (~6s vs. ~3s on
    # "pacman -Slq" input and 4 threads) and xe simply hangs.
    sift_args+=("--satisfies=$str")
done

# exit on empty stdin
if ! (( ${#pkgset[@]} )); then
    exit 1
fi

# main loop
provides "${sift_args[@]}" | while read -ra array; do
    package=${array[0]}

    if [[ ${pkgset[$package]} ]]; then
        printf '%s\n' "$package"
    fi

    for ((i = 1; i < ${#array[@]}; i++)); do
        virtual=${array[$i]}
        case $virtual in
            None) continue ;;
        esac

        version=${pkgset[$virtual]}
        case $version in
            1) plain "dependency $virtual satisfied by $package" >&2
               printf '%s\n' "$virtual" ;;
            *) plain "$dependency $virtual$version satisfied by $package" >&2
               printf '%s\n' "$virtual" ;;
        esac
    done
done

# vim: set et sw=4 sts=4 ft=sh:

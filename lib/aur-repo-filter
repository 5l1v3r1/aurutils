#!/bin/bash
# aur-repo-filter - filter packages in the Arch Linux repositories
readonly argv0=repo-filter
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
readonly arch_repo=(core extra testing community{,-testing} multilib{,-testing})

nover_provides() {
    if (($#)); then
        pacsift "$@" <&- | expac '%n %R %S' -Sv -
    fi
}

usage() {
    printf >&2 'usage: %s [-d repo] [-a]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

opt_short='d:a'
opt_long=('all' 'database:')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset argv_repo sync_repo pacsift_args
while true; do
    case "$1" in
        -a|--all) sync_repo=1 ;;
        -d|--database) shift; argv_repo+=("$1") ;;
        --dump-options) printf -- '--%s\n' "${opt_long[@]}" ;
                        printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                        exit ;;
        --) shift; break;;
    esac
    shift
done
unset opt_short opt_long OPTRET

if ((sync_repo)); then
    sift_args+=(--sync)
elif [[ -v argv_repo ]]; then
    sift_args+=(--exact "${argv_repo[@]/#/--repo=}")
else
    sift_args+=(--exact "${arch_repo[@]/#/--repo=}")
fi

# check for interactive terminal
if [[ -t 0 ]]; then
    cat >&2 <<EOF
Warning: Input is read from the terminal. You either know what you
Warning: are doing, or you forgot to pipe data into $argv0.
Warning: Press CTRL-D to exit.
EOF
fi

# associative array for input package names
declare -A pkgset

while IFS= read -r str; do
    # store unversioned string as key
    name=${str%%[<>=]*}

    # store version + operator as value (1 if unavailable)
    if ((${#str} - ${#name})); then
        pkgset[$name]=${str:${#name}}
    else
        pkgset[$name]=1
    fi

    # XXX: This will hit ARG_MAX on approximately 70k packages. Neither
    # xargs nor parallel appear to work with (correctly quoted)
    # foo>1.23 package strings, regardless of delimitation.
    sift_args+=("--satisfies=$str")
done

nover_provides "${sift_args[@]}" | while read -ra array; do
    package=${array[0]}

    if [[ ${pkgset[$package]} ]]; then
        printf '%s\n' "$package"
    fi

    for ((i = 1; i < ${#array[@]}; i++)); do
        virtual=${array[$i]}

        # XXX: check if replaces matches the required version
        if [[ $virtual != 'None' ]] && [[ ${pkgset[$virtual]} ]]; then
            plain "virtual dependency $virtual satisfied by $package" >&2
            printf '%s\n' "$virtual"
        fi
    done
done

# vim: set et sw=4 sts=4 ft=sh:

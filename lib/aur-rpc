#!/bin/bash
# aur-rpc - interface with AurJson
readonly argv0=rpc
readonly aur_location='https://aur.archlinux.org'
readonly PS4='+(${BASH_SOURCE}:${LINENO}):${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

query_info() {
    awk -v rpc="$aur_location/rpc/?v=5&type=info" '{
        if (NR == 1)
            printf "%s&arg[]=%s", rpc, $0
        else if (NR % 150 == 0)
            printf "\n%s&arg[]=%s", rpc, $0
        else if (NR > 1)
            printf "&arg[]=%s", $0
    } END {
        printf "\n"
    }'
}

query_search() {
    awk -v rpc="$aur_location/rpc/?v=5&type=search&by=$1&arg" '{
        printf "%s=%s\n", rpc, $0
    }'
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    printf >&2 'usage: %s [-t [info|search] ] [-b by]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='b:t:h'
opt_long=('by:' 'type:' 'help')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset by type
while true; do
    case "$1" in
        -b|--by)   shift; by=$1 ;;
        -t|--type) shift; type=$1 ;;
        -h|--help) usage ;;
        --dump-options) printf -- '--%s\n' "${opt_long[@]}" ;
                        printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                        exit ;;
        --) shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

tmp=$(mktemp -dt "$argv0".XXXXXXXX) || exit
trap 'trap_exit' EXIT

# set filters
case $type in
      info) query() { query_info; }                      ;;
    search) query() { query_search "${by:-name-desc}"; } ;;
         *) usage ;;
esac

# pipeline
jq -R -r '@uri' | query | wget -nv -i - -O -

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
# aur-vercmp - check packages for AUR updates
set -o pipefail
readonly argv0=vercmp
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
format=check
target=aur

cmp_equal_or_newer() {
    local pkg v_cmp v_in op

    while read -r pkg v_cmp v_in; do
        case $v_cmp in
            -) op=2 ;; # - on field 2
            *) op=$(my_vercmp "$v_in" "$v_cmp") ;;
        esac

        case $op in
           -1) plain "$pkg: $v_cmp is newer than $v_in"
               printf '%s\n' "$pkg" ;;
            0) printf '%s\n' "$pkg" ;;
            1) msg2 "$pkg: $v_cmp -> $v_in" ;;
            2) msg2 "$pkg: (none) -> $v_in" ;;
        esac
    done
}

cmp_checkupdates() {
    local pkg v_cmp v_in op

    while read -r pkg v_cmp v_in; do
        case $v_in in
            -) op=2 ;; # - on field 3
            *) op=$(my_vercmp "$v_in" "$v_cmp") ;;
        esac

        if ((!$1)) && ((op > -1)); then
            continue
        fi

        case $op in
           -1) printf '%s: %s -> %s\n' "$pkg" "$v_in" "$v_cmp" ;;
            0) printf '%s: %s = %s\n'  "$pkg" "$v_in" "$v_cmp" ;;
            1) printf '%s: %s <- %s\n' "$pkg" "$v_in" "$v_cmp" ;;
            2) printf '%s: (none) -> %s\n' "$pkg" "$v_cmp"     ;;
        esac
    done
}

my_vercmp() {
    if [[ $1 == "$2" ]]; then
        printf '%d' 0 # common case
    else
        vercmp "$1" "$2"
    fi
}

parse_aur() {
    aur rpc -t info | jq -r '.results[] | [.Name, .Version] | @tsv'
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-ac] [-p file]"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

opt_short='p:u:ach'
opt_long=('all' 'path:' 'upair:' 'help')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset all aux repo upair
while true; do
    case "$1" in
        -a|--all)   all=1 ;;
        -c)         format=equal ;;
        -p|--path)  shift; target=file; aux=$1 ;;
        -u|--upair) shift; upair=$1 ;;
        -h|--help)  usage ;;
        --dump-options) printf -- '--%s\n' "${opt_long[@]}" ;
                        printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                        exit ;;
        --) shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

tmp=$(mktemp) || exit
trap 'trap_exit' EXIT

# set input file
sort -k 1b,1 >"$tmp"

# set filters (1)
case $target in
     aur) get() { awk '{print $1}' "$tmp" | parse_aur; } ;;
    file) get() { awk '{print $0}' "$aux"; } ;;
esac

# set filters (2)
case $format in
    check) cmp() { cmp_checkupdates "${all-0}"; }
           upair=${upair-1} ;; # join unpaired of target
    equal) cmp() { cmp_equal_or_newer; }
           upair=${upair-2} ;; # join unpaired of input
esac

# pipeline
get | sort -k 1b,1 | join -a "$upair" -e - -o 0,1.2,2.2 - "$tmp" | cmp

# vim: set et sw=4 sts=4 ft=sh:

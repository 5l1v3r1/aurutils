#!/bin/bash
readonly argv0=vercmp
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

declare -i geq=0 ver=1 cmp=0 pkg_key=1
declare mode=aur

cmp_equal_or_newer() {
    while IFS=$'\t' read -r pkg v_cmp v_in; do
        case $v_cmp in
             -) msg2 "$pkg N/A -> $v_in"
                continue ;;
             *) op=$(my_vercmp "$v_in" "$v_cmp") ;;
        esac

        case $op in
            -1) plain "$pkg $v_cmp is newer than $v_in"
                printf -- '%s\n' "$pkg"     ;;
             0) printf -- '%s\n' "$pkg"     ;;
             1) msg2 "$pkg $v_cmp -> $v_in" ;;
        esac
    done
}
readonly -f cmp_equal_or_newer

cmp_all() {
    while IFS=$'\t' read -r pkg v_cmp v_in; do
        case $pkg in
            -) printf >&2 -- '%s (not available)\n' "$name"
               continue ;;
            *) op=$(my_vercmp "$v_in" "$v_cmp") ;;
        esac

        if ((op > -1 && !geq)); then
            continue
        fi

        if ((ver)); then
            case "$op" in
                -1) printf -- '%s %s -> %s\n' "$pkg" "$v_in" "$v_cmp" ;;
                 0) printf -- '%s %s = %s\n'  "$pkg" "$v_in" "$v_cmp" ;;
                 1) printf -- '%s %s <- %s\n' "$pkg" "$v_in" "$v_cmp" ;;
            esac
        else
            printf '%s\n' "$pkg"
        fi
    done
}
readonly -f cmp_all

db_namever() {
    awk '/%NAME%/    { getline; printf("%s\t", $1) }
         /%VERSION%/ { getline; printf("%s\n", $1) }'
}
readonly -f db_namever

key_sort() {
    sort -k 1b,1 -t $'\t'
}
readonly -f key_sort

# optimize for the common case (version equality)
my_vercmp() {
    if [[ $1 != "$2" ]]; then
        vercmp "$1" "$2"
    else
        printf '%d' 0
    fi
}
readonly -f my_vercmp

parse_aur() {
    aur rpc -t info | jq -r '.results[] |
        [.Name, .Version] | @tsv' | key_sort
}
readonly -f parse_aur

parse_db() {
    bsdcat "$1" | db_namever | key_sort | awk '{print} END {
        if (!NR) printf("-\t-\n")
    }'
}
readonly -f parse_db

parse_sync() {
    pacsift --exact --repo="$1" --null <&- | \
        xargs -0r pacman -Sddp --print-format %n$'\t'%v
}
readonly -f parse_sync

join_auto() {
    join -a 2 -e - -o auto -t $'\t' "$1" "$2"
}
readonly -f join_auto

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}
readonly -f trap_exit

usage() {
    plain "usage: $argv0 [-aclq] [-r root]"
    exit 1
}
readonly -f usage

source /usr/share/makepkg/util/message.sh || exit

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

unset database repo root
while getopts :acd:lr:q OPT; do
    case $OPT in
        a) geq=1        ;;
        c) mode=db_cmp  ;;
        d) mode=aur_db
           repo=$OPTARG ;;
        l) mode=db_list ;;
        r) root=$OPTARG ;;
        q) ver=0        ;;
        *) usage        ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

tmp=$(mktemp) || exit
trap 'trap_exit' EXIT

case $mode in
    aur)
        key_sort >"$tmp"
        cut -f1 "$tmp" | parse_aur | join_auto - "$tmp" | cmp_all  ;;
    aur_db)
        pacconf --repo="$repo" >/dev/null || exit
        parse_sync "$repo" | key_sort >"$tmp"
        cut -f1 "$tmp" | parse_aur | join_auto - "$tmp2" | cmp_all ;;
    db_cmp)
        key_sort >"$tmp"
        parse_db "$root" | join_auto - "$tmp" | cmp_equal_or_newer ;;
    db_list)
        parse_db "$root" ;;
esac

# vim: set et sw=4 sts=4 ft=sh:

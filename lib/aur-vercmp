#!/bin/bash
readonly argv0=vercmp
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

declare with=aur
declare format=brief

cmp_loop() {
    declare -f "$1" >/dev/null || return 1

    while read -r pkg v_cmp v_in _; do
        case $v_cmp in
            -) op=2                             ;;
            *) op=$(my_vercmp "$v_in" "$v_cmp") ;;
        esac

        "$1" "$op" "$pkg" "$v_cmp" "$v_in"
    done
}
readonly -f cmp_loop

# XXX breaks on sparse input (#273)
fmt_equal_or_newer() {
    declare -r op=$1 pkg=$2 v_cmp=$3 v_in=$4

    case $op in
        2) msg2 "$pkg: N/A -> $v_in"    ;;
        1) msg2 "$pkg: $v_cmp -> $v_in" ;;
        0) printf -- '%s\n' "$pkg" ;;
       -1) plain "$pkg: $v_cmp is newer than $v_in"
           printf -- '%s\n' "$pkg" ;;
    esac
}
readonly -f fmt_equal_or_newer

fmt_checkupdates() {
    declare -r op=$1 pkg=$2 v_cmp=$3 v_in=$4

    case $op in
        2) printf -- '%s: (not available)\n' "$pkg" >&2 ;;
        1) printf -- '%s: %s <- %s\n' "$pkg" "$v_in" "$v_cmp" ;;
        0) printf -- '%s: %s = %s\n'  "$pkg" "$v_in" "$v_cmp" ;;
       -1) printf -- '%s: %s -> %s\n' "$pkg" "$v_in" "$v_cmp" ;;
    esac
}

# XXX allow "1" case or switch arguments(cmp_loop)
fmt_brief() {
    declare -r op=$1 pkg=$2 v_cmp=$3 v_in=$4

    case $op in
        -1) printf -- '%s: %s -> %s\n' "$pkg" "$v_in" "$v_cmp" ;;
    esac
}
readonly -f fmt_brief

my_vercmp() {
    if [[ $1 != "$2" ]]; then
        vercmp "$1" "$2"
    else
        printf '%d' 0
    fi
}
readonly -f my_vercmp

join_auto() {
    sort -k 1b,1 "$1" | join -a 2 -e - -o auto - <(sort -k 1b,1 "$2")
}
readonly -f join_auto

parse_aur() {
    aur rpc -t info | jq -r '.results[] |
        [.Name, .Version] | @tsv'
}
readonly -f parse_aur

parse_sync() {
    pacconf --repo="$1" >/dev/null || return

    pacsift --repo="$1" --exact <&- | xargs -r \
        pacman -Sddp --print-format '%n %v'
}
readonly -f parse_sync

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}
readonly -f trap_exit

usage() {
    plain "usage: $argv0 [-d repo] [-p file] [-ac]"
    exit 1
}
readonly -f usage

source /usr/share/makepkg/util/message.sh || exit

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

unset aux_p repo
while getopts :d:p:ac opt; do
    case $opt in
        d) repo=$OPTARG  ;;
        p) with=file
           aux_p=$OPTARG ;;
        a) format=all    ;;
        c) format=equal  ;;
        *) usage         ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

tmp=$(mktemp) || exit
trap 'trap_exit' EXIT

# set input file
if [[ -v repo ]]; then
    parse_sync "$repo" >"$tmp"
else
    if [[ -t 0 ]]; then
        plain 'repository not specified, assuming stdin'
    fi
    tee >"$tmp"
fi

# set filters (1)
case $with in
     aur) get() { awk '{print $1}' "$tmp" | parse_aur; } ;;
    file) get() { awk '{print $0}' "$aux_p";           } ;;
       *) error "$argv0: invalid argument"
          exit 22 ;;
esac

# set filters (2)
case $format in
      all) compare() { cmp_loop fmt_checkupdates;   } ;;
    brief) compare() { cmp_loop fmt_brief;          } ;;
    equal) compare() { cmp_loop fmt_equal_or_newer; } ;;
        *) error "$argv0: invalid argument"
           exit 22 ;;
esac

# pipeline
get | join_auto - "$tmp" | compare

# vim: set et sw=4 sts=4 ft=sh:

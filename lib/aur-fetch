#!/bin/bash
# aur-fetch - retrieve build files from the AUR
readonly argv0=fetch
readonly aur_location='https://aur.archlinux.org'
readonly fmt_git_clone=$aur_location/%s.git
readonly fmt_snapshot=$aur_location/cgit/aur.git/snapshot/%s.tar.gz
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
fetch_args=()

# default options
recurse=0
mode=git

linef() {
    awk -v "f=$1" '{printf(f, $0);}'
}

usage() {
    base64 -d <<EOF
ICAgICAgICAgICAgIC4tLX5+LF9fCjotLi4uLiwtLS0tLS0tYH5+Jy5fLicKIGAtLCwsICAsXyAg
ICAgIDsnflUnCiAgXywtJyAsJ2AtX187ICctLS4KIChfLyd+fiAgICAgICcnJycoOwoK
EOF
    printf >&2 'usage: %s [-grt] [-L log_dir] pkgname...\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='L:rgth'
opt_long=('log-dir:' 'recurse' 'git' 'tar' 'help')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset log_dir
while true; do
    case "$1" in
        -L|--log-dir) shift; log_dir=$1 ;;
        -r|--recurse) recurse=1 ;;
        -g|--git)     mode=git ;;
        -t|--tar)     mode=snapshot ;;
        -h|--help)    usage ;;
        --dump-options) printf -- '--%s\n' "${opt_long[@]}" ;
                        printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                        exit ;;
        --) shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

if ((!$#)); then
    usage
fi

if [[ -v log_dir ]]; then
    fetch_args+=(-L "$log_dir")

    if ! [[ -d $log_dir ]]; then
        printf >&2 '%s: %q: not a directory' "$argv0" "$log_dir"
        exit 21
    fi
fi

# set filters (1)
case $recurse in
    # total order is not required, though output must be unique.
    1) deps() { aur depends | cut -f3 | sort -u; } ;;
    0) deps() { tee; } ;;
esac

# set filters (2)
case $mode in
         git) uri() { linef "$fmt_git_clone\n"; } ;;
    snapshot) uri() { linef "$fmt_snapshot\n" ; } ;;
esac

# pipeline
printf '%s\n' "$@" | deps | uri | aur "fetch-$mode" "${fetch_args[@]}"

# vim: set et sw=4 sts=4 ft=sh:

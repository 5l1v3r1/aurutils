#!/bin/bash
# aur-fetch - retrieve build files from the AUR
readonly argv0=fetch
readonly aur_location='https://aur.archlinux.org'
readonly fmt_git_clone=$aur_location/%s.git
readonly fmt_snapshot=$aur_location/cgit/aur.git/snapshot/%s.tar.gz
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
fetch_args=()

# default options
deps=0
mode=git

usage() {
    base64 -d <<EOF
ICAgICAgICAgICAgIC4tLX5+LF9fCjotLi4uLiwtLS0tLS0tYH5+Jy5fLicKIGAtLCwsICAsXyAg
ICAgIDsnflUnCiAgXywtJyAsJ2AtX187ICctLS4KIChfLyd+fiAgICAgICcnJycoOwoK
EOF
    printf >&2 'usage: %s [-dgt] [-L log_dir] pkgname [pkgname...]\n' "$argv0"
    exit 1
}

unset log_dir
while getopts :dgtL: opt; do
    case $opt in
        L) log_dir=$OPTARG ;;
        d) deps=1   ;;
        g) mode=git ;;
        t) mode=snapshot ;;
        *) usage    ;;
    esac
done
shift $((OPTIND -1))
OPTIND=1

if ((!$#)); then
    usage
fi

if [[ -v log_dir ]]; then
    fetch_args+=(-L "$log_dir")

    if ! [[ -d $log_dir ]]; then
        printf >&2 '%s: %q: not a directory' "$argv0" "$log_dir"
        exit 21
    fi
fi

# set filters (1)
case $deps in
    1) print_deps() { printf '%s\n' "$@" | aur deps-rpc; } ;;
    0) print_deps() { printf '%s\n' "$@"; } ;;
esac

# set filters (2)
case $mode in
         git) format() { xargs printf "$fmt_git_clone\n"; } ;;
    snapshot) format() { xargs printf "$fmt_snapshot\n" ; } ;;
esac

# pipeline
print_deps "$@" | format | aur "fetch-$mode" "${fetch_args[@]}"

# vim: set et sw=4 sts=4 ft=sh:

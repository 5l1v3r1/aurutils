#!/bin/bash
# aur-repo - manage local repositories

# default arguments
vercmp_args=()

conf_file_repo() {
    awk -F'= ' '
        $1 ~ /^\[.+\]$/ {
            repo = substr($1, 2, length($1)-2)
        }
        $1 ~ /^Server/ && $2 ~ /^file:/ {
            printf("%s\0%s\n", repo, $2)
        }'
}

db_namever() {
    awk -v '
    /%NAME%/ {
        getline
        printf("%s\t", $1)
    }
    /%VERSION%/ {
        getline
        printf("%s\n", $1)
    }
    END {
        if (!NR)
            printf("warning: empty database\n") > "/dev/stderr"
    }'
}

check_sync() {
    # https://github.com/andrewgregory/pacutils/issues/22
    pacconf --repo="$1" >/dev/null || return 1
}

parse_sync() {
    # https://git.archlinux.org/pacman.git/commit/?id=ab3d8478
    pacsift --exact --null --repo "$1" <&- \
        | xargs -0r pacman -Sddp --print-format "$2"
}

usage() {
    plain "usage: $argv0 [-aSlu] [-d repo] [-r root]"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

## option parsing
opt_short='d:o:r:ahlSu'
opt_long=('all' 'database:' 'list' 'root:' 'pacman' 'upgrades'
          'repo-list' 'status-file:' 'help')

if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset mode db_name db_root status_file
while true; do
    case $1 in
        -a|--all)      vercmp_args+=(--all) ;;
        -d|--database) shift; db_name=$1 ;;
        -r|--root)     shift; db_root=$1 ;;
        --status-file) shift; status_file=$1 ;;
        -l|--list)     mode=list_packages ;;
        -S|--pacman)   mode=list_pacman ;;
        -u|--upgrades) mode=list_pacman_upgrades ;;
        --repo-list)   mode=repo_list ;;
        -h|--help) usage ;;
        --) shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

case $mode in
    repo_list) pacconf | conf_file_repo
               exit ;;
esac

if [[ ${db_name=$AUR_REPO} ]]; then
    if ! [[ ${db_root=$AUR_DBROOT} ]]; then
        db_root=$(pacconf --single --repo="$db_name" Server)
        db_root=${db_root#*://}
    fi
else
    mapfile -t conf < <(pacconf | conf_file_repo)

    case ${#conf[@]} in
        2) db_name=${conf[0]}
           db_root=${conf[1]#*://} ;;
        0) error "$argv0: no file:// repository found"
           exit 2 ;;
        *) error "$argv0: repository choice is ambiguous (use --repo to specify)"
           printf '%s\n' "${conf[@]}" | paste - - | column -t >&2
           exit 2 ;;
    esac
fi

# resolve .db symbolic link
db_path=$(realpath -e -- "$db_root/$db_name".db)

if [[ -v status_file ]]; then
    printf '%s\0%s\n' "$db_name" "$db_path" >"$status_file"
fi

case $mode in
    list_packages)
        bsdcat "$db_path" | db_namever
        ;;
    list_pacman)
        check_sync "$db_name" || exit
        parse_sync "$db_name" '%r %n %v'
        ;;
    list_upgrades)
        check_sync "$db_name" || exit
        parse_sync "$db_name" '%n %v' | aur vercmp "${vercmp_args[@]}"
        ;;
    *)
        printf '%s\n' "$db_path" ;;
esac

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
# shellcheck disable=SC2016
# aur-srcver - update and print package revisions
readonly argv0=srcver
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
readonly startdir=$PWD

get_pkgbuild_info() {
    env -C "$1" -i bash -c '
        PATH= source PKGBUILD

        if [[ -v epoch ]]; then
            fullver=$epoch:$pkgver-$pkgrel
        else
            fullver=$pkgver-$pkgrel
        fi

        printf %s\\t%s\\n "${pkgbase:-$pkgname}" "$fullver"
    '
}

find_pkgbuild_path() {
    find "$@" -maxdepth 1 -type f -name PKGBUILD -printf '%h\0'
}

usage() {
    printf 'usage: %s path [path...]\n' "$argv0" >&2
    exit 1
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

if ((!$#)); then
    usage
fi

command -V parallel >/dev/null || exit

# XXX trickery for hyphen and absolute path arguments
mapfile -t arg_path < <(readlink -e -- "$@")

tmp=$(mktemp -dt "$argv0".XXXXXXXX) || exit
trap 'trap_exit' EXIT

cd "$tmp" || exit
parallel --will-cite --nice 10 -j +2 --joblog makepkg_log --results '{#}_makepkg' \
  'cd {}; makepkg --skipinteg --noprepare -od' >/dev/null 2>&1 ::: "${arg_path[@]}"
exitcode=$?

if ((exitcode > 101)); then
    printf >&2 '%s: error running "parallel", exit code %d\n' "$argv0" "$exitcode"
    exit "$exitcode"
fi

if ((exitcode > 0 )); then
    printf >&2 '%s: failed to update %s packages\n' "$argv0" "$exitcode"

    while IFS=$'\t' read -r seq _ _ _ _ _ jobexitcode _ command; do
        if ((!jobexitcode)); then
            continue
        else
            printf >&2 '8<----\n'
            printf >&2 '%s\n' "$command"

            cat "${seq}_makepkg" >&2
            cat "${seq}_makepkg.err" >&2
        fi
    done < makepkg_log
fi

find_pkgbuild_path "${arg_path[@]}" | while IFS= read -d $'\0' -r; do
    get_pkgbuild_info "$REPLY"
done

# vim: set et sw=4 sts=4 ft=sh:

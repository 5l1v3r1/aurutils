#!/bin/bash
# aur-build-nspawn - build packages using systemd-nspawn
set -o errexit
readonly argv0=build-nspawn
readonly PATH=/bin:/usr/bin
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
machine=$(uname -m)
readonly machine

directory=/var/lib/aurbuild/$machine
makechrootpkg_args=(-cu)
makepkg_conf=/usr/share/devtools/makepkg-$machine.conf
pacman_conf=/usr/share/devtools/pacman-extra.conf
mode=build

conf_options() {
    printf '[options]\n'
    pacconf --config="$1" --options --raw
}

conf_repo() {
    while IFS= read -r; do
        printf -- '[%s]\n' "$REPLY"
        pacconf --config="$1" --raw --repo="$REPLY"
    done
}

conf_devtools() {
    # print pacman options from devtools
    conf_options "$1"

    # https://git.archlinux.org/devtools.git/tree/mkarchroot.in#n54
    printf '#CacheDir=\n'

    # print pacman repos from host
    pacconf --repo-list | conf_repo '/etc/pacman.conf'
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    printf -- >&2 'usage: %s [-CDMu] -- <makechrootpkg args>' "$argv0"
    exit 1
}

while getopts :C:D:M:u opt; do
    case $opt in
        C) pacman_conf=$OPTARG  ;;
        D) directory=$OPTARG    ;;
        M) makepkg_conf=$OPTARG ;;
        u) mode=update          ;;
        *) usage                ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if (($#)); then
    makechrootpkg_args=("$@")
fi

trap 'trap_exit' EXIT
tmp=$(mktemp -d)

# XXX Duplication between "update" mode and makechrootpkg -u
case $mode in
    update)
        conf_devtools "$pacman_conf" >"$tmp"/pacman.conf

        if [[ -f $directory/root/.arch-chroot ]]; then
            # locking is done by systemd-nspawn
            arch-nspawn -C "$tmp"/pacman.conf -M "$makepkg_conf" \
                        "$directory"/root pacman -Syu --noconfirm
        else
            install -d "$directory" -m 755 -v || exit
            mkarchroot  -C "$tmp"/pacman.conf -M "$makepkg_conf" \
                        "$directory"/root base-devel
        fi
        ;;
    build)
        PKGDEST="${PKGDEST:-$PWD}" makechrootpkg \
               -r "$directory" "${makechrootpkg_args[@]}"
        ;;
esac

# vim: set et sw=4 sts=4 ft=sh:

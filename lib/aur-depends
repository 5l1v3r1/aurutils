#!/bin/bash
# aur-depends - retrieve package dependencies using AurJson
readonly argv0=depends
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
readonly max_request=30

count() {
    jq -r '.resultcount' "$1" | awk '{s += $1} END {print s}'
}

tabulate() {
    jq -r '.results[]
        | .Name         as $name
        | .PackageBase  as $base
        | .Version      as $ver
        | ([$name] + .Depends + .MakeDepends + .CheckDepends)[]?
        | [$name, ., $base, $ver] | @tsv' "$1"
}

tr_ver() {
    sed -r 's/[<>=].*$//g'
}

chain() {
    local a num sub

    aur rpc -t info > json/0 || exit
    num=$(count json/0)

    if ((num < 1)); then
        printf '%s: no packages found\n' "$argv0" >&2
        exit 1
    fi

    for ((a = 1; a <= max_request; ++a)); do
        sub=$((a-1))
        tabulate json/$sub | tee -a tsv/n > tsv/$sub

        # Avoid querying duplicates (#4)
        cut -f1 tsv/$sub >> seen # pkgname
        cut -f2 tsv/$sub | tr_ver | grep -Fxvf seen \
            | aur rpc -t info > json/$a || exit # rpc error

        if [[ -s json/$a ]]; then
            num=$(count json/$a)
        else
            cat tsv/n
            return # no unique results
        fi

        if ((num >= 1)); then
            cut -f2 tsv/$sub >> seen # depends
        else
            cat tsv/n
            return # no results, recursion complete
        fi
    done

    # recursion limit exceeded
    printf >&2 '%s: total requests: %d (out of range)\n' "$argv0" "$a"
    exit 34
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    printf >&2 'usage: %s\n' "$argv0"
    exit 1
}

tmp=$(mktemp -dt "$argv0".XXXXXXXX) || exit
trap 'trap_exit' EXIT

if cd "$tmp" && mkdir json tsv; then
    chain # tsv/n: pkgname\tdepends\tpkgbase\pkgver
else
    exit
fi

# vim: set et sw=4 sts=4 ft=sh:

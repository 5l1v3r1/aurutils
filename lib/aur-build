#!/bin/bash
# aur-build - build packages to a local repository
set -o errexit
shopt -s extglob
readonly argv0=build
readonly startdir=$PWD
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
chroot_args=()
gpg_args=(--detach-sign --no-armor --batch)
makechrootpkg_args=(-cu)
makepkg_args=(-crs)
repo_add_args=()

# default options
chroot=0 no_sync=0 overwrite=0 sign_pkg=0

conf_repo() {
    printf '[options]\n'
    pacconf --options --raw

    printf '[%s]\n' "$1"
    pacconf --repo="$1"
}

db_replaces() {
    bsdcat "$1" | awk '
    /%REPLACES%/ {
        while(NF != 0) {
	    getline; print
	}
    }'
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp" "$var_tmp"
    fi
}

usage() {
    plain "usage: $argv0 -d database [-afNRsv] [--] <makepkg args>" >&2
    exit 1
}

source /usr/share/makepkg/util/util.sh
source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

## option parsing
opt_short='a:d:r:C:D:M:cfNRsv'
opt_long=('arg-file:' 'chroot' 'database:' 'force' 'root:' 'sign'
          'verify' 'directory:' 'no-sync' 'pacman-conf:'
          'makepkg-conf:' 'remove')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset queue db_name db_path db_root
while true; do
    case "$1" in
        -a|--arg-file)  shift; queue=$1 ;;
        -d|--database)  shift; db_name=$1 ;;
        -r|--root)      shift; db_root=$1 ;;
        -c|--chroot)    chroot=1 ;;
        -f|--force)     overwrite=1 ;;
        -s|--sign)      sign_pkg=1; repo_add_args+=(-s) ;;
        -v|--verify)    repo_add_args+=(-v) ;;
        -D|--directory) shift; chroot_args+=(-D "$1") ;;
        -C|--pacman-conf)  shift; chroot_args+=(-C "$1") ;;
        -M|--makepkg-conf) shift; chroot_args+=(-M "$1") ;;
        -N|--no-sync)   no_sync=1 ;;
        -R|--remove)    repo_add_args+=(-R) ;;
        --dump-options) printf -- '--%s\n' "${opt_long[@]}" ;
                        printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                        exit ;;
        --) shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

tmp=$(mktemp -d "${TMPDIR:-/tmp}/$argv0".XXXXXXXX)
var_tmp=$(mktemp -d "${TMPDIR:-/var/tmp}/$argv0".XXXXXXXX)

trap 'trap_exit' EXIT
trap 'exit' INT

# reset default makechrootpkg arguments
if (($#)); then
    if ((chroot)); then
        makechrootpkg_args=("$@")
    else
        makepkg_args=("$@")
    fi
fi

if type -P xdelta3 >/dev/null; then
    repo_add_args+=(-d)
fi

# assign environment variables
: ${db_name=$AUR_REPO}
: ${db_root=$AUR_DBROOT}

# XXX retrieve db_name and db_root directly via --status-file
if ! [[ $db_name ]] && [[ $db_root ]]; then
    error "$argv0: root specified without database name"
    exit 1
elif ! [[ $db_name ]]; then
    db_path=$(aur repo) # absolute path to file:// repository
    db_name=$(basename "$db_path" .db)
    db_root=$(dirname "$db_path")
elif ! [[ $db_root ]]; then
    db_path=$(aur repo -d "$db_name")
    db_root=$(dirname "$db_path")
else
    db_path=$db_root/$db_name.db
fi

# resolve symbolic link
db_path=$(readlink -f -- "$db_path")

if ! [[ -w $db_path ]]; then
    error "$argv0: $db_path: permission denied"
    exit 13
fi

if [[ -v queue ]]; then
    exec {fd}< "$queue"
else
    exec {fd}< <(printf '\n')
fi

if ((sign_pkg)); then
    if [[ -v GPGKEY ]]; then
        gpg --list-keys "$GPGKEY"
        gpg_args+=(-u "$GPGKEY")
    fi
else
    db_sigs=("$db_root/$db_name".sig "$db_root/$db_name".files.sig)

    if [[ -f ${db_sigs[0]} ]]; then
        # avoid errors from stale db.sig files
        error "$argv0: database signature found, but signing is disabled"

        printf '%q\n' >&2 "${db_sigs[@]}"
        exit 1
    fi
fi

if ((chroot)); then
    aur chroot -d "$db_name" --no-build "${chroot_args[@]}" 
else
    conf_repo "$db_name" >"$tmp"/custom.conf
fi

while IFS= read -ru "$fd" path; do
    cd_safe "$startdir/$path"

    if ((!overwrite)); then
        unset mark

        while IFS= read -r; do
            [[ -f $REPLY ]] && mark+=("$REPLY")
        done < <(PKGDEST="$db_root" makepkg --packagelist)

        if [[ ${mark[*]} ]]; then
            warning "skipping built package (use -f to overwrite)"

            printf '%q\n' >&2 "${mark[@]}"
            continue
        fi
    fi

    if ((chroot)); then
        printf '%s\n' >&2 "Running makechrootpkg ${makechrootpkg_args[*]}"
        PKGDEST="$var_tmp" aur chroot --no-prepare "${chroot_args[@]}" \
            -- "${makechrootpkg_args[@]}"
    else
        printf '%s\n' >&2 "Running makepkg ${makepkg_args[*]}"
        PKGDEST="$var_tmp" makepkg "${makepkg_args[@]}"
    fi

    cd_safe "$var_tmp"
    pkglist=(./!(*.sig)) # discard makepkg --sign from package list (#410)
    siglist=()

    for p in "${pkglist[@]}"; do
        if [[ -f $p.sig ]]; then
            warning "$argv0: existing package signature found"
            siglist+=("$p".sig)

        elif ((sign_pkg)); then
            gpg "${gpg_args[@]}" --output "$p".sig "$p"
            siglist+=("$p".sig)
        fi
    done

    # move build products (relative paths)
    mv -bf "${pkglist[@]}" "${siglist[@]}" "$db_root"

    cd_safe "$db_root"
    LANG=C repo-add "${repo_add_args[@]}" "$db_path" "${pkglist[@]}"

    if ((chroot)) || ((no_sync)); then
        continue
    else
        replaces=$(grep -Fxf <(db_replaces "$db_path") <(pacman -Qq) | paste -s -d, -)

        sudo pacman -Fy  --config="$tmp"/custom.conf
        sudo pacman -Syu --config="$tmp"/custom.conf --ignore="$replaces" --noconfirm
    fi
done

exec {fd}<&-

# vim: set et sw=4 sts=4 ft=sh:

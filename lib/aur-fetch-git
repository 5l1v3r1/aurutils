#!/bin/bash
# aur-fetch-git - retrieve build files using git
set -o errexit
readonly argv0=fetch-git
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
log_dir=/dev/stdout

# XXX git usually prints to stdout, which is processed by later filters.
# Redirect to stderr or take an argument for the "git log" output.
merge_upstream() {
    git fetch -v >&2

    if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
        git --no-pager log --patch --stat '..@{upstream}'

        # reset index and working tree
        git reset --hard HEAD >&2
        git merge >&2
    fi
}

merge_across_fs() {
    # avoid issues with filesystem boundaries (#274)
    GIT_DIR="$1"/.git GIT_WORK_TREE="$1" merge_upstream
}

usage() {
    printf -- >&2 'usage: %s [-L log_dir]\n' "$argv0"
    exit 1
}

not_a_directory() {
    printf -- >&2 '%s: %q: not a directory\n' "$argv0" "$1"
    exit 20
}

while getopts :L: opt; do
    case $opt in
        L) log_dir=$OPTARG ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if [[ $log_dir == /dev/stdout ]]; then
    merge_log() { tee; }
elif [[ -d $log_dir ]]; then
    merge_log() { tee -a "$log_dir/$1".patch >/dev/null; }
else
    not_a_directory "$log_dir"
fi

while IFS= read -r uri; do
    pkg=${uri##*/}   # strip path
    pkg=${pkg%%.git} # strip .git suffix

    if [[ -d $pkg/.git ]]; then
        merge_across_fs "$pkg" | merge_log "$pkg"
    else
        git clone "$uri"
    fi
done

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
# aur-fetch-git - retrieve build files using git
set -o errexit
readonly argv0=fetch-git
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
log=stdout

merge_upstream() {
    local orderfile=${GIT_DIR:-$PWD/.git}/orderfile
    git fetch -v >&2

    # default to showing PKGBUILD diffs first (#399)
    if [[ ! -s $orderfile ]]; then
        echo PKGBUILD > "$orderfile"
    fi

    if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
        # only print log on upstream changes
        git --no-pager log -O "$orderfile" --patch --stat \
            '..@{upstream}' >> "${1:-/dev/stdout}"

        # discard any local changes (#349)
        git reset --hard HEAD@{upstream} >&2
    fi
}

merge_across_fs() {
    # avoid issues with filesystem boundaries (#274)
    GIT_DIR="$PWD/$1"/.git GIT_WORK_TREE="$PWD/$1" merge_upstream "$2"
}

usage() {
    printf >&2 'usage: %s [-L path]\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='L:h'
opt_long=('log-dir:' 'help')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

while true; do
    case "$1" in
        -L|--log-dir) shift; log_dir=$1; log=directory ;;
        -h|--help) usage ;;
        --dump-options) printf -- '--%s\n' "${opt_long[@]}" ;
                        printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                        exit ;;
        --) shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

# set filters
case $log in
    directory) merge_log() { merge_across_fs "$1" "$log_dir/$1".patch; } ;;
       stdout) merge_log() { merge_across_fs "$1"; } ;;
esac

while IFS= read -r uri; do
    pkg=${uri##*/}   # strip path
    pkg=${pkg%%.git} # strip .git suffix

    if [[ -d $pkg/.git ]]; then
        merge_log "$pkg"
    else
        git clone "$uri"
    fi
done

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

aurweb="https://aur.archlinux.org"
cache="${XDG_CACHE_HOME:-$HOME/.cache}/aursearch"
rpc="$aurweb/rpc/?v=5&type=info"
tmp=$(mktemp -d) || exit

readonly aurweb cache rpc tmp

brief() {
    while {
        read -r Name
        read -r Version
        read -r NumVotes
        read -r Description
    }; do
        printf 'aur/%s %s (%s)\n    %s\n' "$Name" "$Version" "$NumVotes" "$Description"
    done < <(jshon -C -a -e results -a -e Name -u -p -e Version -u -p -e NumVotes -u -p -e Description -u)
}

argsum() {
    cksum <<< "$1" | awk '{print $1}'
}

split() {
    awk -v rpc=$rpc '{
        # URL encode @ and +
        gsub("+","%2b"); gsub("@","%40");

        if (NR == 1 || (NR % 150) == 0)
            printf "\n%s&arg[]=%s", rpc, $0;
        else
            printf "&arg[]=%s", $0;
    }'
}

getjson() {
    aria2c -s 16 -x 16 -j 32 -q -d "$tmp" -i -
    # Merge to a single JSON structure.
    awk '{print}' "$tmp"/index.html* | sed -e '1i[' -e '$!s/$/,/' -e '$a]'
}

fetch() {
    msg "Retrieving package list"
    curl -sS "$aurweb"/packages.gz -o packages.gz
    zgrep -ve '^#' packages.gz > packages
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh || exit

if ((!$#)); then
    error "aursearch: pattern"
    exit 1
fi

[[ -t 2 ]] && colorize

mkdir -p "$cache" -m 700
cd "$cache" || exit

if stamp_l=$(stat --format '%Y' packages.gz 2>/dev/null); then
    # aurweb lacks a "Last-Modified" field, so use head to close stdout
    # after reading one line.
    stamp_r=$(curl -s "$aurweb"/packages.gz | zcat | head -1 | awk -F, '{print $3}')
    stamp_r=$(date -d "$stamp_r" '+%s')

    if ((stamp_r > stamp_l)); then
        fetch
    fi
else
    fetch
fi

msg 'Sending request'
grep -P -- "$1" "$cache"/packages | split | getjson | brief

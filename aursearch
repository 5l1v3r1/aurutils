#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

aurweb="https://aur.archlinux.org"
cache="${XDG_CACHE_HOME:-$HOME/.cache}/aursearch"
rpc="$aurweb/rpc/?v=5&type=info"
tmp=$(mktemp -d) || exit

readonly aurweb cache rpc tmp

fetch() {
    curl -sS "$aurweb"/packages.gz -o packages.gz
    gzip -cd packages.gz | grep -ve '^#' > packages
}

stamp() {
    if stamp_l=$(stat --format '%Y' packages.gz 2>/dev/null); then
        # aurweb lacks a "Last-Modified" field, so use head to close the
        # pipe after reading one line.
        # XXX: curl returns 141, noticed by pipefail
        stamp_r=$(curl -s "$aurweb"/packages.gz | gzip -cd | head -1 | awk -F, '{print $3}')
        if [[ $stamp_r ]]; then
            stamp_r=$(date -d "$stamp_r" '+%s')
            if ((stamp_r > stamp_l)); then
                fetch
            fi
        fi
    else
        fetch
    fi
}

match() {
    if ((!$#)); then
        error "No search pattern"
        exit 1
    else
        if ! grep -P -- "$1" packages; then
            error "No matches found"
            exit 2
        fi
    fi
}

split() {
    awk -v rpc="$rpc" '{
        # URL encode @ and +
        gsub("+","%2b"); gsub("@","%40");

        if (NR == 1 || (NR % 150) == 0)
            printf "\n%s&arg[]=%s", rpc, $0;
        else
            printf "&arg[]=%s", $0;
    }'
}

getjson() {
    aria2c -s 16 -x 16 -j 32 -q -d "$tmp" -i -
    # Merge to a single JSON structure.
    awk '{print}' "$tmp"/index.html* | sed -e '1i[' -e '$!s/$/,/' -e '$a]'
}

brief() {
    while {
        read -r Name
        read -r Version
        read -r NumVotes
        read -r Description
    }; do
        # libmakepkg misses PURPLE and CYAN
        printf "${BLUE}aur/${ALL_OFF}${BOLD}%s ${GREEN}%s ${ALL_OFF}(%s)\n    %s\n" "$Name" "$Version" "$NumVotes" "$Description"
    done < <(jshon -C -a -e results -a -e Name -u -p -e Version -u -p -e NumVotes -u -p -e Description -u)
}

long() {
    errno 38
    exit
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :ipr OPT; do
    case $OPT in
        i|+i) parse=long  ;;
        p|+p) matchonly=1 ;;
        r|+r) splitonly=1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

mkdir -p "$cache" -m 700
cd "$cache" || exit

stamp

if ((matchonly)); then
    match "$1"
elif ((splitonly)); then
    printf '%s\n' "$@" | split | getjson
else
    match "$1" | split | getjson | "${parse:-brief}"
fi

#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail

XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
AURDEST=${AURDEST:-$XDG_CACHE_HOME/aurmaid}

aurweb=https://aur.archlinux.org
tarpath=$aurweb/cgit/aur.git/snapshot
tmp=$(mktemp -d)

readonly XDG_CACHE_HOME AURDEST aurweb tarpath tmp

confirm() {
    local -l reply
    local message prompt
    local bias=$1; shift

    case $bias in
        yes) prompt=Y/n ;;
        no)  prompt=y/N ;;
    esac

    printf -v message -- "$BOLD* $1 [$prompt]$ALL_OFF " "${@:2}"
    read -rp "$message" reply

    case $bias in
        yes) [[ $reply = y || ! $reply ]] ;;
        no)  [[ $reply = y ]] ;;
    esac
}

inspect() {
    if confirm yes 'View build files?'; then
        xargs -a "$1" -i find {} -maxdepth 1 | vifm - '+view!'
    fi
}

check() {
    git fetch 2>/dev/null

    if [[ $(git rev-parse HEAD) != $(git rev-parse @{upstream}) ]]; then
        msg2 "changes found: $1"
        git --no-pager log --oneline --stat ..@{upstream}

        if confirm no 'Merge?'; then
            git merge
        fi
    fi
}

clone() {
    declare pwd=$PWD
    
    while read -r base; do
        if cd "$pwd/$base" 2>/dev/null; then
            check "$base"
        else
            git clone "$aurweb/$base".git
        fi
    done

    cd "$pwd"
}

snapshot() {
    cd "$tmp"

    awk -v uri=$tarpath '{
        gsub("+","%2b"); gsub("@","%40");
        printf "%s/%s.tar.gz\n", uri, $1
    }' | aria2c -s 16 -x 16 -j 32 -i -

    mkdir -p "$AURDEST"/snapshot

    for ar in ./*.tar.gz; do
        tar xvf "$ar" -C "$AURDEST"/snapshot
    done
}

prepare() {
    declare base name ver rel syncver
    
    # Update pkgver for VCS sources
    makepkg --verifysource --nobuild >/dev/null

    while read -r key _ val; do
        case "$key" in
            pkgbase) base=$val ;;
	    pkgname) name+=("$val") ;;
            pkgver)  ver=$val ;;
            pkgrel)  rel=$val ;;
        esac
    done < <(makepkg --printsrcinfo)

    # Read the first match (split packages are built together)
    read -r syncver < <(expac -1 -S '%v' "${name[@]}") || :

    # Workaround for $(vercmp letter "") == -1
    if [[ ! $syncver ]] || (($(vercmp "$ver-$rel" "$syncver") == 1)); then
        msg "$base: $syncver -> $ver-$rel"
        printf '%s\n' "$base"
    else
        msg "$base is up-to-date"
    fi
}

prepare_all() {
    declare pwd=$PWD

    if ((noprepare)); then
        tee
    else    
	while read -r pkg; do
	    cd "$pwd/$pkg"
	    prepare "$pkg"
	done
    fi

    cd "$pwd"
}

repofind() {
    #global target pool
    declare repo path
    declare -A rset

    while {
        read -r repo
        read -r _ _ path
    } do
        if [[ $path =~ ^file:// ]]; then
            rset[$repo]=${path#file://}
        fi
    done < <(pacconf --single | awk '/^\[/ && !/options/ || /Server/ {gsub(/[][]/,""); print}')

    if [[ ${rset[@]} ]]; then
        if ((${#rset[@]} > 1)); then
            select target in "${!rset[@]}"; do
                break
            done
        else
            target=${!rset[*]}
        fi

        msg "Using [$target] repository"
        pool=${rset[$target]}
    else
        error "No file:// repository found"
        exit 2
    fi
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts :clft OPT; do
    case $OPT in
        c|+c) aurbuild_args+=(-c) ;;
	f|+f) aurbuild_args+=(-f)
	      noprepare=1         ;;
        l|+l) resolve=aurqueue
              download=/bin/true  ;;
        t|+t) download=snapshot   ;;
        *)    plain "usage: aurmaid [+-clft} [--] ARGS..."
              exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# Operations are done in the cache directory, unless said otherwise.
cd "$AURDEST"

if "${resolve:-aurchain}" "$@" | tee "$tmp"/q | "${download:-clone}"; then
    inspect "$tmp"/q
 
    if grep -Fxf <(prepare_all < "$tmp"/q) "$tmp"/q > "$tmp"/q_new; then
        if repofind; then
            aurbuild_args+=(-d "$target".db -r "$pool" -p "$pool")
            aurbuild "${aurbuild_args[@]}" "$tmp"/q_new
        fi
    fi
fi

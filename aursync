#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
readonly AURDEST=${AURDEST:-$XDG_CACHE_HOME/aursync}
readonly remote=https://aur.archlinux.org
readonly store=$remote/cgit/aur.git/snapshot

confirm() {
    local -l reply
    local message=$*

    read -rp "$message [Y/n] " reply
    [[ ! $reply || $reply = y?(es) ]]
}

clone() {
    while read -r base; do
	if cd "$AURDEST/$base" 2>/dev/null; then
            git pull -v || return
	else
            git clone -v "$remote/$base".git || return
	fi
    done
}

snapshot() {
    if tmp=$(mktemp -d) && cd "$tmp"; then
	awk -v uri=$store '{
	    gsub("+","%2b"); gsub("@","%40");
	    printf "%s/%s.tar.gz\n", uri, $1
	}' | aria2c -s 16 -x 16 -j 32 -i -

	for ar in ./*.tar.gz; do
	    tar xvf "$ar" -C "$AURDEST"/ || return
	done

	rm -rf "$tmp"
    fi
}

prepare() {
    #global todo
    declare base name ver rel syncver

    # Update pkgver for VCS sources
    makepkg --verifysource --nobuild

    while read -r key _ val; do
	case "$key" in
	    pkgname) name+=("$val") ;;
	    pkgbase) base=$val ;;
	    pkgver)  ver=$val  ;;
	    pkgrel)  rel=$val  ;;
	esac
    done < <(mksrcinfo -o /dev/stdout)

    read -r syncver < <(expac -1 -Sv '%v' "${name[@]}"
    
    if (($(vercmp "$ver-$rel" "$syncver") == 1)); then
	msg "$base: $syncver -> $ver-$rel"
	todo[$pkgbase]=1
    else
	warning "$name is up-to-date"
    fi   
}

repofind() {
    #global target pool
    declare repo path
    declare -A rset

    while {
	read -r repo
	read -r _ _ path
    } do
	if [[ $path =~ ^file:// ]]; then
            rset[$repo]=${path#file://}
	fi
    done < <(pacconf --single | awk '/^\[/ && !/options/ || /Server/ {gsub(/[][]/,""); print}')

    if [[ ${rset[@]} ]]; then
        if ((${#rset[@]} > 1)); then
            select target in "${!rset[@]}"; do
                break
            done
        else
            target=${!rset[*]}
        fi

        msg "Using [$target] repository"
        pool=${rset[$target]}
    else
        error "No file:// repository found"
        exit 1
    fi
}

source /usr/share/makepkg/util.sh || exit 1

[[ -t 2 ]] && colorize

cd "$AURDEST" || exit 1

declare -A todo

if aurchain "$@" | tee queue | snapshot; then
    if confirm 'Inspect build files?'; then
        xargs -a queue -i find {} -maxdepth 1 | vifm - -c '+vie'
    fi
    
    while read -r p; do
	cd "$AURDEST/$p" && prepare
    done < queue
    
    cd "$AURDEST" || exit 1
    
    if grep -Fxf <(printf '%s\n' "${!todo[@]}") queue > queue_new; then
	repofind && aurbuild -d "$target".db -r "$pool" -p "$pool" queue_new
    fi
fi

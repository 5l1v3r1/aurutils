#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail

argv0=aursync
aurweb=https://aur.archlinux.org
tarpath=$aurweb/cgit/aur.git/snapshot
tmp=$(mktemp -d)

XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
AURDEST=${AURDEST:-$XDG_CACHE_HOME/$argv0}

readonly argv0 aurweb rpc tarpath tmp XDG_CACHE_HOME AURDEST

confirm() {
    declare -l reply
    declare message
    
    printf -v message -- "$BOLD* $1 [Y/n]$ALL_OFF " "$@"
    read -rp "$message" reply    
    [[ $reply = y || ! $reply ]]
}

viewer() {
    if hash 2>/dev/null vifm; then
	vifm - '+view!'
    else
	command -- "${PAGER:-less}"
    fi
}

inspect() {
    if confirm 'View build files?'; then
        xargs -a "$1" -i find {} -maxdepth 1 | viewer
    fi
}

clone() {
    while read -r base; do
        ( if cd "$base" 2>/dev/null; then
              git pull
          else
              git clone "$aurweb/$base".git
          fi
	)
    done
}

snapshot() {
    awk -v uri=$tarpath '{
        gsub("+","%2b"); gsub("@","%40");
        printf "%s/%s.tar.gz\n", uri, $1
    }' | aria2c -s 16 -x 16 -j 32 -d "$tmp" -i -

    mkdir -p snapshot

    for ar in "$tmp"/*.tar.gz; do
        tar xvf "$ar" -C snapshot
    done
}

prepare_vcs() {
    declare source proto v
    declare -A vcs

    while read -r source; do
	proto=$(get_protocol "$source")
	proto=${proto/[+:]*}

	case "$proto" in
	    bzr|git) vcs[$proto]=1 ;;
	    hg)  vcs[mercurial]=1  ;;
	    svn) vcs[subversion]=1 ;;
	esac
    done < <(awk '/source/ {print $3}' .SRCINFO)

    if [[ ${vcs[@]} ]]; then
	for v in "${!vcs[@]}"; do
	    pacman -T "$v" || sudo pacman -S --asdeps --noconfirm "$v"
	done
	
	makepkg --verifysource >/dev/null
	makepkg --printsrcinfo > .SRCINFO
    fi
}

prepare() {
    declare key val base name ver rel syncver
    
    while read -r key _ val; do
	[[ $key == pkgbase ]] && base=$val
	[[ $key == pkgname ]] && name+=("$val")
	[[ $key == pkgver  ]] && ver=$val
	[[ $key == pkgrel  ]] && rel=$val
    done < .SRCINFO

    # Read the first match (split packages are built together)
    read -r syncver < <(expac -1 -S '%v' "${name[@]}") || :

    if [[ ! $syncver ]] || (($(vercmp "$ver-$rel" "$syncver") == 1)); then
        msg2 "$base: ${syncver:-0} -> $ver-$rel"
        printf '%s\n' "$base"
    elif (($(vercmp "$ver-$rel" "$syncver") == -1)); then
	warning "$base: $ver-$rel <- $syncver"
    else
        msg2 "$base is up-to-date"
    fi
}

prepare_all() {
    if ((noprepare)); then
        tee
    else
	while read -r pkg; do
	    ( cd "$pkg"
	      prepare_vcs
	      prepare
	    )
	done
    fi
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts :cfnt OPT; do
    case $OPT in
        c|+c) aurbuild_args+=(-c) ;;
	f|+f) aurbuild_args+=(-f) ;;
	n|+n) noprepare=1         ;;
        t|+t) download=snapshot   ;;
        *)    plain "usage: $argv0 [+-cfnt} [--] ARGS..."
              exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# Operations are done in the cache directory, unless said otherwise.
mkdir -p "$AURDEST" -m 700
cd "$AURDEST"

if aurchain "$@" | tee "$tmp"/q | "${download:-clone}"; then
    inspect "$tmp"/q
 
    if grep -Fxf <(prepare_all < "$tmp"/q) "$tmp"/q > "$tmp"/q_new; then
        if read -r repo pool < <(repofind -s); then
            aurbuild_args+=(-d "$repo".db -r "$pool" -p "$pool")
            aurbuild "${aurbuild_args[@]}" "$tmp"/q_new
        fi
    fi
fi

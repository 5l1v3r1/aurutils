#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail

argv0=aursync
aurweb=https://aur.archlinux.org
tmp=$(mktemp -d)

XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
AURDEST=${AURDEST:-$XDG_CACHE_HOME/$argv0}

readonly argv0 aurweb tmp XDG_CACHE_HOME AURDEST

viewer() {
    if hash 2>/dev/null vifm; then
        vifm - '+view!'
    else
        command -- "${PAGER:-less}"
    fi
}

inspect() {
    xargs -i find {} -maxdepth 1 | viewer
}

revcheck() {
    #global tmp
    git fetch

    if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
        git --no-pager log --patch --stat '..@{upstream}' >> "$tmp"/"$1".diff
        git stash
        git merge
    fi
}

clone() {
    #global aurweb
    while read -r base _; do
        ( if cd "$base" 2>/dev/null; then
              revcheck "$base"
          else
              git clone "$aurweb/$base".git
          fi
        ) >/dev/null
    done
}

aria() {
    #global tarpath tmp
    awk -v uri="$aurweb"/cgit/aur.git/snapshot '{
        gsub("+","%2b")
        gsub("@","%40")

        printf "%s/%s.tar.gz\n", uri, $1
    }' | aria2c -d "$tmp" -i -

    for ar in "$tmp"/*.tar.gz; do
        tar xvf "$ar"
    done
}

# Replace pkgname with pkgbase in-place.
sedbase() {
    declare base name

    while read -r base name ; do 
        if [[ $name != "$base" ]]; then
            sed -i "s|^$name$|$base|g" "$1"
        fi
    done
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts :cdfknut OPT; do
    case $OPT in
        c|+c) aurbuild_args+=(-c) ;;
        d|+d) nobuild=1           ;;
        f|+f) aurbuild_args+=(-f) ;;
        k|+k) insecure=1          ;;
        n|+n) noprepare=1         ;;
        u|+u) update=1            ;;
        t|+t) download=aria       ;;
        *) plain "usage: $argv0 [+-cdfknut} [--] ARGS..."
           exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# Version information from repofind -u is unlikely to add aurchain
# results, but don't assume this, and only take the package names.
if ((update)); then
    read -r repo pool < <(repofind -s)
    update_targets=($(repofind -u "$repo" | awk '{print $1}'))

    if [[ ! ${update_targets[@]} ]]; then
        msg2 "No updates available"
    else
        set -- "$@" "${update_targets[@]}"
    fi
fi

if ((!$#)); then
    error "$argv0: no targets specified"
    exit 1
fi

# Operations are done in the cache directory, unless said otherwise.
mkdir -p "$AURDEST" -m 700
cd "$AURDEST"

# Use a separate tar directory to prevent conflicts with git.
if [[ $download == aria ]]; then
    mkdir -p snapshot -m 700
    cd snapshot
fi

# Copy the queue, and retrieve the AUR metadata for later processing.
aurchain "$@" | tee "$tmp"/chain | xargs -r aursearch -Fr > "$tmp"/raw

if [[ ! -s "$tmp"/raw ]]; then
    error "$argv0: no data available"
    exit 61
fi

# The RPC sorts results alphabetically, overwriting an existing order.
jshon -F "$tmp"/raw -a -e results -a -e PackageBase -u -p -e Name -u | xargs -n2 > "$tmp"/pair_base

# Download build files by pkgbase (split packages).
awk '{print $1 | "sort -u"}' "$tmp"/pair_base | tee "$tmp"/base | "${download:-clone}"

if ((nobuild)); then
    msg "Files downloaded to $PWD"
    exit
fi

# View changes and build files in one window (#77).
if ! ((insecure)); then
    ( shopt -s nullglob
      printf '%s\n' "$tmp"/*.diff | cat - "$tmp"/base | inspect
    )
fi

# Strip version information for later use with grep.
awk '{print $1}' "$tmp"/chain > "$tmp"/chain_name

# Replace pkgname with pkgbase (split packages).
sedbase "$tmp"/chain_name < "$tmp"/pair_base

if ! ((noprepare)); then
    # Print all updated sync packages.
    aursift -U < "$tmp"/chain > "$tmp"/chain_sync

    # This assumes all packages in a split package are available (#28).
    sedbase "$tmp"/chain_sync < "$tmp"/pair_base

    # Print relative complement: pkgbase (all) \ pkgbase (sync).
    grep -Fxvf "$tmp"/chain_sync "$tmp"/chain_name > "$tmp"/chain_new
else
    cp "$tmp"/chain_name "$tmp"/chain_new
fi

# Avoid selecting repo/pool twice with -u.
if ! ((update)); then
    read -r repo pool < <(repofind -s)
fi

aurbuild_args+=(-d "$repo".db -r "$pool" -p "$pool")
aurbuild "${aurbuild_args[@]}" "$tmp"/chain_new

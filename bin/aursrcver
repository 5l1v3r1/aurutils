#!/bin/bash
readonly argv0=aursrcver
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
readonly startdir=$PWD

get_pkgbuild_info() {
    env -C "$1" -i bash -c '
        PATH= source PKGBUILD

        if [[ -v epoch ]]; then
            fullver=$epoch:$pkgver-$pkgrel
        else
            fullver=$pkgver-$pkgrel
        fi

        printf "%s\\t%s\\n" "${pkgbase:-$pkgname}" "$fullver"
    '
}

find_pkgbuild_path() {
    find "$@" -maxdepth 1 -type f -name PKGBUILD -printf '%h\n'
}

trap_err() {
    printf '%s: error: see %s\n' "$argv0" "$1"
    exit 1
}

trap_exit() {
    # preserve makepkg log on error
    ((!$?)) && rm "$1"
}

readonly -f get_pkgbuild_info find_pkgbuild_path trap_err trap_exit

makepkg_log=$(mktemp -t makepkg.XXXXXXXX) || exit
trap 'trap_err  $makepkg_log' ERR
trap 'trap_exit $makepkg_log' EXIT

# trickery for hyphen and absolute path arguments
mapfile -t arg_path < <(readlink -e -- "$@")

find_pkgbuild_path "${arg_path[@]}" | while read -r; do
    cd "$REPLY"

    makepkg --noprepare -od >>"$makepkg_log" 2>&1
    get_pkgbuild_info "$REPLY"
done

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
# shellcheck disable=SC2016
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=aursearch
aurweb="https://aur.archlinux.org"
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit

readonly PS4 argv0 aurweb tmp
format=short
list=pkgname
searchby=name

urlencode() {
    jq -R -r '@uri'
}

split() {
    awk -v rpc="$aurweb/rpc/?v=5&type=info" '{
        if (NR == 1)
            printf "%s&arg[]=%s", rpc, $0
        if (NR > 1)
            printf "&arg[]=%s", $0
        if (NR % 150 == 0)
            printf "\n%s&arg[]=%s", rpc, $0
    } END {
        printf "\n"
    }'
}

dl_stdin() {
    if type -P aria2c >/dev/null 2>&1; then
        aria2c --download-result=hide --console-log-level=error --stderr=true -d "$tmp"/aria2 -i - && cat "$tmp"/aria2/*
    elif type -P parallel >/dev/null 2>&1; then
        parallel --will-cite -X -j +8 --nice 10 --halt soon,fail=1 'curl -fgLsS --compressed {}'
    else
        xargs -I{} curl -fgLsS --compressed {}
    fi
}

getjson() {
    declare outfile="$tmp"/out.json

    if dl_stdin > "$outfile"; then
        # https://lists.archlinux.org/pipermail/aur-dev/2016-October/004143.html
        sed 's/^/[/; s/}{/},{/g; s/$/]/' "$outfile"
    else
        exit $?
    fi
}

json_short() {
    jq -e -r '[.[].results[]] | sort_by(.Name)[] | .Name,
        .Version,
        .NumVotes,
        .Description' | while
    {
        read -r Name
        read -r Version
        read -r NumVotes
        read -r Description
    }; do
        printf "${BLUE}aur/${ALL_OFF}${BOLD}%s ${GREEN}%s ${ALL_OFF}(%s)\n    %s\n" \
               "$Name" "$Version" "$NumVotes" "$Description"
    done
}

json_long() {
    jq -e -r '[.[].results[]] | sort_by(.Name)[] | .Name,
        .PackageBase,
        .Version,
        .Description,
        .URL,
        .NumVotes,
        .Popularity,
        .OutOfDate,
        .Maintainer,
        .FirstSubmitted,
        .LastModified' | while
    {
        read -r Name
        read -r PackageBase
        read -r Version
        read -r Description
        read -r URL
        read -r NumVotes
        read -r Popularity
        read -r OutOfDate
        read -r Maintainer
        read -r FirstSubmitted
        read -r LastModified
    }; do
        printf "Name:            %s\n" "$Name"
        printf "Base:            %s\n" "$PackageBase"
        printf "Version:         %s\n" "$Version"
        printf "Description:     %s\n" "$Description"
        printf "URL:             %s\n" "$URL"
        printf "Votes:           %s\n" "$NumVotes"
        printf "Popularity:      %s\n" "$Popularity"
        printf "Out Of Date:     %s\n" "$OutOfDate"
        printf "Maintainer:      %s\n" "$Maintainer"
        printf "First Submitted: %s\n" "$(date -d @"$FirstSubmitted" '+%c')"
        printf "Last Modified:   %s\n" "$(date -d @"$LastModified" '+%c')"
        printf '\n'
    done
}

match() {
    declare e ptr args

    for e in "${@:2}"; do
        ptr+=(-e "$e")
    done

    case "$1" in
        pkgbase)
            args+=(-b)
            ;;&
        pkgname|pkgbase)
            aurgrep "${args[@]}" -- "${ptr[@]}"
            ;;
        fixed)
            printf '%s\n' "${@:2}"
            ;;
    esac
}

parse() {
    case "$1" in
        short) json_short ;;
        long)  json_long  ;;
        none)  tee ;;
    esac
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

trap 'trap_exit' EXIT
source /usr/share/makepkg/util.sh || exit

if [[ -t 2 ]]; then
    colorize
fi

while getopts :PFbrvmd OPT; do
    case "$OPT" in
        P|F) searchby=none ;;&
        F) list=fixed   ;;
        b) list=pkgbase ;;
        r) format=none  ;;
        v) format=long  ;;
        m) searchby=maintainer ;;
        d) searchby=name-desc  ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

for arg; do
    case "$arg" in
        -) readarray in
           set -- "$@" "${in[@]}"
           break ;;
    esac
done

if ((!$#)); then
    plain "$argv0: no targets specified"
    exit 1
fi

if [[ $searchby != none ]]; then
  { for q in "$@"; do
    printf '%s/rpc/?v=5&type=search&by=%s&arg=' "$aurweb" "$searchby"
    printf '%s\n' "$q" | urlencode
  done } | getjson | parse "$format"
else
  match "$list" "$@" | urlencode | split | getjson | parse "$format"
fi

# vim: set et sw=4 sts=4 ft=sh:

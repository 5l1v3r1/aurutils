#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=aursearch
aurweb="https://aur.archlinux.org"
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit

readonly argv0 aurweb tmp

# Default options
declare -i nameonly=0 string=0 raw=0 verbose=0

# The actual "match" is done by aurweb; as such, string is similar
# to grep --fixed-strings.
match() {
    #global string ag_args
    if ((string)); then
        printf '%s\n' "$@"
    else
        aurgrep "${ag_args[@]}" "$1"
    fi
}

# Split by 150 arguments to prevent HTTP 414.
# https://bugs.archlinux.org/task/49089
split() {
    awk -v rpc="$aurweb/rpc/?v=5&type=info" '{
        gsub("+","%2b")
        gsub("@","%40")

        if (NR == 1)
            printf "%s&arg[]=%s", rpc, $0
        if (NR > 1)
            printf "&arg[]=%s", $0
        if (NR % 150 == 0)
            printf "\n%s&arg[]=%s", rpc, $0
    } END {
        printf "\n"
    }'
}

getjson() {
    if aria2c --download-result=hide --console-log-level=error --stderr=true -d "$tmp" -i -; then
        # If stdin is empty, aria reports "No files to download" and
        # returns 0. When -i or -Z are set, the file name can not be changed.
        [[ ! -s "$tmp"/index.html ]] && return

        # Merge to a single JSON structure, see jshon(1).
        awk '{print}' "$tmp"/index.html* | sed -e '1i[' -e '$!s/$/,/' -e '$a]' > "$tmp"/raw

        # Check for results, only print if non-zero (#96)
        case $(jshon -F "$tmp"/raw -a -e resultcount -u) in
            0) error "$argv0: no matches found"
               exit 1 ;;
            *) cat "$tmp"/raw ;;
        esac
    else
        exit $?
    fi
}

brief() {
    while {
        read -r Name
        read -r Version
        read -r NumVotes
        read -r Description
    }; do
        # libmakepkg misses PURPLE and CYAN
        printf "${BLUE}aur/${ALL_OFF}${BOLD}%s ${GREEN}%s ${ALL_OFF}(%s)\n    %s\n" \
               "$Name" "$Version" "$NumVotes" "$Description"
        # The RPC fills empty fields with "null", removing the need for jshon -C.
    done < <(jshon -Q -a -e results -a -e Name -u -p -e Version \
                   -u -p -e NumVotes -u -p -e Description -u)
}

long() {
    while {
        read -r Name
        read -r PackageBase
        read -r Version
        read -r Description
        read -r URL
        read -r NumVotes
        read -r Popularity
        read -r OutOfDate
        read -r Maintainer
        read -r FirstSubmitted
        read -r LastModified
    }; do
        printf "Name:            %s\n" "$Name"
        printf "Base:            %s\n" "$PackageBase"
        printf "Version:         %s\n" "$Version"
        printf "Description:     %s\n" "$Description"
        printf "URL:             %s\n" "$URL"
        printf "Votes:           %s\n" "$NumVotes"
        printf "Popularity:      %s\n" "$Popularity"
        printf "Out Of Date:     %s\n" "$OutOfDate"
        printf "Maintainer:      %s\n" "$Maintainer"
        printf "First Submitted: %s\n" "$(date -d @"$FirstSubmitted" '+%c')"
        printf "Last Modified:   %s\n" "$(date -d @"$LastModified" '+%c')"
        printf '%s\n'
    done < <(jshon -Q -a -e results -a -e Name -u -p -e PackageBase -u -p -e Version \
                   -u -p -e Description -u -p -e URL -u -p -e NumVotes -u -p -e Popularity \
                   -u -p -e OutOfDate -u -p -e Maintainer -u -p -e FirstSubmitted \
                   -u -p -e LastModified -u)
}

parse() {
    #global raw verbose
    if ((raw)); then
        tee
    elif ((verbose)); then
        long
    else
        brief
    fi
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :Fbqru:v OPT; do
    case $OPT in
        F|+F) string=1      ;;
        b|+b) ag_args+=(-b) ;;
        q|+q) nameonly=1    ;;
        r|+r) raw=1         ;;
        v|+v) verbose=1     ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((!$#)); then
    plain "$argv0: no targets specified"
    exit 1
fi

if ((nameonly)); then
    match "$1"
    exit
fi

match "$@" | split | getjson | parse

# vim: set et sw=4 sts=4 ft=sh:

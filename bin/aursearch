#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=aursearch
aurweb="https://aur.archlinux.org"
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit

readonly PS4 argv0 aurweb tmp
format=short
list=pkgname

# Split by 150 arguments to prevent HTTP 414.
# https://bugs.archlinux.org/task/49089
split() {
    awk -v rpc="$aurweb/rpc/?v=5&type=info" '{
        gsub("+","%2b")
        gsub("@","%40")

        if (NR == 1)
            printf "%s&arg[]=%s", rpc, $0
        if (NR > 1)
            printf "&arg[]=%s", $0
        if (NR % 150 == 0)
            printf "\n%s&arg[]=%s", rpc, $0
    } END {
        printf "\n"
    }'
}

getjson() {
    if aria2c --download-result=hide --console-log-level=error --stderr=true -d "$tmp" -i -; then
        declare out=("$tmp"/index*html*)

        if [[ -s ${out[0]} && $(jshon -F "${out[0]}" -e resultcount -u) -gt 0 ]]; then
            awk '{print}' "${out[@]}" | sed -e '1i[' -e '$!s/$/,/' -e '$a]'
        else
            error "$argv0: no results found"
            exit 1
        fi
    else
        exit $?
    fi
}

json_short() {
    while {
        read -r Name
        read -r Version
        read -r NumVotes
        read -r Description
    }; do
        printf "${BLUE}aur/${ALL_OFF}${BOLD}%s ${GREEN}%s ${ALL_OFF}(%s)\n    %s\n" \
               "$Name" "$Version" "$NumVotes" "$Description"
    done < <(jshon -Q -a -e results -a -e Name -u -p -e Version \
                   -u -p -e NumVotes -u -p -e Description -u)
}

json_long() {
    while {
        read -r Name
        read -r PackageBase
        read -r Version
        read -r Description
        read -r URL
        read -r NumVotes
        read -r Popularity
        read -r OutOfDate
        read -r Maintainer
        read -r FirstSubmitted
        read -r LastModified
    }; do
        printf "Name:            %s\n" "$Name"
        printf "Base:            %s\n" "$PackageBase"
        printf "Version:         %s\n" "$Version"
        printf "Description:     %s\n" "$Description"
        printf "URL:             %s\n" "$URL"
        printf "Votes:           %s\n" "$NumVotes"
        printf "Popularity:      %s\n" "$Popularity"
        printf "Out Of Date:     %s\n" "$OutOfDate"
        printf "Maintainer:      %s\n" "$Maintainer"
        printf "First Submitted: %s\n" "$(date -d @"$FirstSubmitted" '+%c')"
        printf "Last Modified:   %s\n" "$(date -d @"$LastModified" '+%c')"
        printf '%s\n'
    done < <(jshon -Q -a -e results -a -e Name -u -p -e PackageBase -u -p -e Version \
                   -u -p -e Description -u -p -e URL -u -p -e NumVotes -u -p -e Popularity \
                   -u -p -e OutOfDate -u -p -e Maintainer -u -p -e FirstSubmitted \
                   -u -p -e LastModified -u)
}

match() {
    declare e ptr args

    for e in "${@:2}"; do
        ptr+=(-e "$e")
    done            

    case "$1" in
        pkgbase)
            args+=(-b)
            ;;&
        pkgname|pkgbase)
            aurgrep "${args[@]}" -- "${ptr[@]}"
            ;;
        fixed)
            printf '%s\n' "${@:2}"
            ;;
    esac
}

parse() {
    case "$1" in
        short) json_short ;;
        long)  json_long  ;;
        none)  tee ;;
    esac
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

trap 'trap_exit' EXIT
source /usr/share/makepkg/util.sh || exit

if [[ -t 2 ]]; then
    colorize
fi

while getopts :Fbrv OPT; do
    case $OPT in
        F) list=fixed   ;;
        b) list=pkgbase ;;
        r) format=none  ;;
        v) format=long  ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((!$#)); then
    plain "$argv0: no targets specified"
    exit 1
fi

match "$list" "$@" | split | getjson | parse "$format"

# vim: set et sw=4 sts=4 ft=sh:

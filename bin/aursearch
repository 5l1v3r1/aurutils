#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=aursearch
aurweb="https://aur.archlinux.org"
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit

readonly PS4 argv0 aurweb tmp

# Default options
declare -i string=0 parser=1

# The actual "match" is done by aurweb; as such, string is similar
# to grep --fixed-strings.
match() {
    #global string aurgrep_args
    if ((string)); then
        printf '%s\n' "$@"
    else
        aurgrep "${aurgrep_args[@]}" "$1"
    fi
}

# Split by 150 arguments to prevent HTTP 414.
# https://bugs.archlinux.org/task/49089
split() {
    awk -v rpc="$aurweb/rpc/?v=5&type=info" '{
        gsub("+","%2b")
        gsub("@","%40")

        if (NR == 1)
            printf "%s&arg[]=%s", rpc, $0
        if (NR > 1)
            printf "&arg[]=%s", $0
        if (NR % 150 == 0)
            printf "\n%s&arg[]=%s", rpc, $0
    } END {
        printf "\n"
    }'
}

getjson() {
    if aria2c --download-result=hide --console-log-level=error --stderr=true -d "$tmp" -i -; then
        # Check if files were retrieved (return 1 if empty stdin)
        if [[ ! -s "$tmp"/index.html ]]; then
            return 1
        fi
        json_merge "$tmp"/index.html* > "$tmp"/raw
        json_count "$tmp"/raw
    else
        exit $?
    fi
}

# Merge to single JSON structure, see jshon(1).
json_merge() {
    awk '{print}' "$@" | sed -e '1i[' -e '$!s/$/,/' -e '$a]'
}

# Check for results, only print if non-zero (#96)
json_count() {
    if [[ $(jshon -F "$1" -e 0 -e resultcount -u) > 0 ]]; then
        cat "$1"
    else
        error "$argv0: no matches found"
        exit 1
    fi
}

json_parse() {
    case "$parser" in
        0) tee   ;;
        1) brief ;;
        2) long  ;;
    esac
}

brief() {
    while {
        read -r Name
        read -r Version
        read -r NumVotes
        read -r Description
    }; do
        # libmakepkg misses PURPLE and CYAN
        printf "${BLUE}aur/${ALL_OFF}${BOLD}%s ${GREEN}%s ${ALL_OFF}(%s)\n    %s\n" \
               "$Name" "$Version" "$NumVotes" "$Description"
        # The RPC fills empty fields with "null", removing the need for jshon -C.
    done < <(jshon -Q -a -e results -a -e Name -u -p -e Version \
                   -u -p -e NumVotes -u -p -e Description -u)
}

long() {
    while {
        read -r Name
        read -r PackageBase
        read -r Version
        read -r Description
        read -r URL
        read -r NumVotes
        read -r Popularity
        read -r OutOfDate
        read -r Maintainer
        read -r FirstSubmitted
        read -r LastModified
    }; do
        printf "Name:            %s\n" "$Name"
        printf "Base:            %s\n" "$PackageBase"
        printf "Version:         %s\n" "$Version"
        printf "Description:     %s\n" "$Description"
        printf "URL:             %s\n" "$URL"
        printf "Votes:           %s\n" "$NumVotes"
        printf "Popularity:      %s\n" "$Popularity"
        printf "Out Of Date:     %s\n" "$OutOfDate"
        printf "Maintainer:      %s\n" "$Maintainer"
        printf "First Submitted: %s\n" "$(date -d @"$FirstSubmitted" '+%c')"
        printf "Last Modified:   %s\n" "$(date -d @"$LastModified" '+%c')"
        printf '%s\n'
    done < <(jshon -Q -a -e results -a -e Name -u -p -e PackageBase -u -p -e Version \
                   -u -p -e Description -u -p -e URL -u -p -e NumVotes -u -p -e Popularity \
                   -u -p -e OutOfDate -u -p -e Maintainer -u -p -e FirstSubmitted \
                   -u -p -e LastModified -u)
}

trap_exit() {
    if [[ -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

trap 'trap_exit' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :Fbru:v OPT; do
    case $OPT in
        F|+F) string=1 ;;
        b|+b) aurgrep_args+=(-b) ;;
        r|+r) parser=0 ;;
        v|+v) parser=2 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((!$#)); then
    plain "$argv0: no targets specified"
    exit 1
fi

match "$@" | split | getjson | json_parse

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=aursearch
aurweb="https://aur.archlinux.org"
cache="${XDG_CACHE_HOME:-$HOME/.cache}/$argv0"
tmp=$(mktemp -d)

readonly argv0 aurweb cache tmp

# $1: URI to .gz archive
stamp() {
    declare gz=${1##*/}
    declare stamp_l stamp_r fetch
    
    if stamp_l=$(stat --format '%Y' "${gz%.*}" 2>/dev/null); then
        # XXX: aurweb lacks a "Last-Modified" field. Instead, use head
        # to close the pipe after reading one line (exit code 141).
        stamp_r=$(curl -s "$1" | gzip -cd 2>/dev/null | head -1 | awk -F, '{print $3}')

        if [[ $stamp_r ]]; then
            stamp_r=$(date -d "$stamp_r" '+%s')

            if ((stamp_r > stamp_l)); then
                fetch=1
            fi
        fi
    else
        fetch=1
    fi

    if ((fetch)); then
        curl -sS "$1" -o "$gz"
        gzip -cd "$gz" | grep -ve '^#' > "${gz%.*}"
    fi
}

# The actual "match" is done by aurweb; as such, string=1 is similar
# to grep --fixed-strings.
match() {
    #global string
    if ((string)); then
        printf '%s\n' "${@:2}"
    else
        stamp "$aurweb/$1".gz
        grep -P -- "$2" "$1"
    fi
}

# aurweb only takes GET requests, so split arguments by 150 to prevent
# HTTP 414 errors.
split() {
    awk -v rpc="$aurweb/rpc/?v=5&type=info" '{
        # URL encode @ and +
        gsub("+","%2b")
        gsub("@","%40")

        if (NR == 1 || (NR % 150) == 0)
            printf "\n%s&arg[]=%s", rpc, $0
        else
            printf "&arg[]=%s", $0
    }'
}

getjson() {
    # aria2c either dumps all errors on stdout, or doesn't display
    # them at all. Preserve exit status, and mention the log file.
    aria2c -d "$tmp" -l "$cache"/aria2c.log --log-level=error -q -i - || ret=$?

    if ((ret)); then
        error "$argv0: see $cache/aria2c.log"
        exit "$ret"
    fi

    # If stdin is empty, aria reports "No files to download" (even
    # with -q) and returns 0.
    if [[ -s "$tmp"/index.html ]]; then
        # Merge to a single JSON structure.
        awk '{print}' "$tmp"/index.html* | sed -e '1i[' -e '$!s/$/,/' -e '$a]'
    else
        error "$argv0: no data available"
        exit 61
    fi
}

brief() {
    while {
        read -r Name
        read -r Version
        read -r NumVotes
        read -r Description
    }; do
        # libmakepkg misses PURPLE and CYAN
        printf "${BLUE}aur/${ALL_OFF}${BOLD}%s ${GREEN}%s ${ALL_OFF}(%s)\n    %s\n" \
               "$Name" "$Version" "$NumVotes" "$Description"
    done < <(jshon -Q -C -a -e results -a -e Name -u -p -e Version \
                   -u -p -e NumVotes -u -p -e Description -u)
}

long() {
    while {
        read -r Name
        read -r PackageBase
        read -r Version
        read -r Description
        read -r URL
        read -r NumVotes
        read -r Popularity
        read -r OutOfDate
        read -r Maintainer
        read -r FirstSubmitted
        read -r LastModified
    }; do
        printf "Name:            %s\n" "$Name"
        printf "Base:            %s\n" "$PackageBase"
        printf "Version:         %s\n" "$Version"
        printf "Description:     %s\n" "$Description"
        printf "URL:             %s\n" "$URL"
        printf "Votes:           %s\n" "$NumVotes"
        printf "Popularity:      %s\n" "$Popularity"
        printf "Out Of Date:     %s\n" "$OutOfDate"
        printf "Maintainer:      %s\n" "$Maintainer"
        printf "First Submitted: %s\n" "$(date -d @"$FirstSubmitted" '+%c')"
        printf "Last Modified:   %s\n" "$(date -d @"$LastModified" '+%c')"
        printf '%s\n'
    done < <(jshon -Q -C -a -e results -a -e Name -u -p -e PackageBase -u -p -e Version \
                   -u -p -e Description -u -p -e URL -u -p -e NumVotes -u -p -e Popularity \
                   -u -p -e OutOfDate -u -p -e Maintainer -u -p -e FirstSubmitted \
                   -u -p -e LastModified -u)
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts :Fbqrv OPT; do
    case $OPT in
        F|+F) string=1     ;;
        b|+b) list=pkgbase ;;
        q|+q) nameonly=1   ;;
        r|+r) parse=tee    ;;
        v|+v) parse=long   ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((!$#)); then
    plain "usage: $argv0 [+-Fbqrv} [--] ARGS..."
    exit 1
fi

# Operations are done in the cache directory, unless said otherwise.
mkdir -p "$cache" -m 700
cd "$cache"

if ((nameonly)); then
    match "${list:-packages}" "$1"
else
    match "${list:-packages}" "$@" | split | getjson | "${parse:-brief}"
fi

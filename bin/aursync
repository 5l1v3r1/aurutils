#!/bin/bash
readonly argv0=aursync
readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
readonly AURDEST=${AURDEST:-$XDG_CACHE_HOME/$argv0}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail -o noclobber
shopt -s nullglob

declare -i view=1 chkver=1 update=0 snapshot=0 chroot=0 rotate=0 build=1 download=1

viewer() {
    if hash 2>/dev/null vifm; then
        vifm - '+view!'
    else
        command -- "${PAGER:-less}"
    fi
}

sub() {
    awk 'NR == FNR {
        x[$1] = $2; next
    } {
        if ($1 in x && !(x[$1] in seen)) {
            print x[$1]; seen[x[$1]];
        }
    }' "$@"
}

lib32() {
    awk -v arch="$(uname -m)" '{
        if(arch == "i686") {
            gsub(/^lib32-/,""); gsub(/^gcc-multilib$/,"")
        }; print
    }' "$@"
}

conf_file_repo() {
    pacconf --single | awk -F'= ' '
        $1 ~ /^\[.+\]$/ {
            repo = substr($1, 2, length($1)-2)
        }
        $1 ~ /^Server/ && $2 ~ /^file:/ {
            printf("%s\n%s\n", repo, $2)
        }'
}

match_urlpath() {
    awk 'NR == FNR {
        x[$0]; next
    } $1 in x {
        print $2
    }' "$@"
}

ign() {
    if [[ -v pkg_i ]]; then
        printf >&2 -- 'warning: %s: ignoring package upgrade\n' "${pkg_i[@]}"
        grep -Exvf <(printf -- '%s\n' "${pkg_i[@]}") -
    else
        tee
    fi
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-ABcCfILnprstTu] [long options] [--] pkgname..."
    exit 1
}

readonly -f viewer sub lib32 conf_file_repo match_urlpath ign trap_exit usage

source /usr/share/makepkg/util.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

if getopt -T || (($? != 4)); then
    error "$argv0: util-linux getopt required"
    exit 22
fi

longopts=allan,bind:,chroot,container:,force,help,ignore:,ignorearch,log,namcap
longopts+=,noconfirm,nover,noview,print,rmdeps,sign,tar,temp,repo:,root:,update
longopts+=,aurutils,ignore-arch,no-confirm,no-ver,no-view,rm-deps,ignfile,continue

if TEMP=$(getopt -o AB:cC:fhI:LnprstTu -l "$longopts" -n "$argv0" -- "$@"); then
    eval set -- "$TEMP"
else
    usage
fi

unset pkg_i pkg root repo aurbuild_args chroot_args local_args
while true; do
    case "$1" in
        -c|--chroot)
            aurbuild_args+=(-c)
            chroot=1
            shift ;;
        -C|--container)
            aurbuild_args+=(-C "$2")
            shift 2 ;;
        -s|--sign)
            aurbuild_args+=(-s)
            shift ;;
        -f|--force)
            aurbuild_args+=(-f)
            shift ;;
        -B|--bind)
            chroot_args+=(-D "$2")
            shift ;;
        -T|--temp)
            chroot_args+=(-T)
            shift ;;
        -A|--ignorearch|--ignore-arch)
            local_args+=(-A)
            shift ;;
        -L|--log)
            local_args+=(-L)
            shift ;;
        -n|--noconfirm|--no-confirm|--namcap)
            chroot_args+=(-n)
            local_args+=(--noconfirm)
            shift ;;
        -r|--rmdeps|--rm-deps)
            local_args+=(-r)
            shift ;;
        -I|--ignore)
            IFS=, read -a pkg -r <<< "$2"
            pkg_i+=("${pkg[@]}")
            shift 2 ;;
        -p|--print)
            build=0
            shift ;;
        -t|--tar)
            snapshot=1
            shift ;;
        -u|--update)
            update=1
            shift ;;
        --allan|--aurutils)
            rotate=1
            shift ;;
        --continue)
            download=0
            shift ;;
        --ignfile)
            mapfile -t pkg_i < "$2"
            shift 2 ;;
        --nover|--no-ver)
            chkver=0
            shift ;;
        --noview|--no-view)
            view=0
            shift ;;
        --repo)
            repo=$2
            shift 2 ;;
        --root)
            root=$2
            shift 2 ;;
        -h|--help)
            usage
            shift ;;
        --)
            shift
            break ;;
    esac
done

if ((rotate)); then
    if { hash rot13 && target=$(aurgrep .+ | shuf -n 1); } 2>/dev/null; then
        exec bash -c "{ \"$argv0\" -c \"$target\" && repo-elephant | rot13; } 2>&1 | rot13"
    else
        echo '?'; exit 16 # EBUSY
    fi
fi

if ((chroot)); then
    makepkg_args=(-cu "${chroot_args[@]}")
else
    makepkg_args=(-cs "${local_args[@]}")
fi

if ! (($# + update)); then
    error "$argv0: no targets specified"
    exit 1
fi

if [[ -v repo ]]; then
    server=$(pacconf --single --repo="$repo" Server)

    if [[ ! -v root ]]; then
        root=${server#*://}
    fi
else
    mapfile -t conf < <(conf_file_repo)

    case ${#conf[@]} in
        2) repo=${conf[0]}
           root=${conf[1]#*://} ;;
        0) error "$argv0: no file:// repository found"
           exit 2 ;;
        *) error "$argv0: repository choice is ambiguous (use --repo to specify)"
           printf -- '%s\t%s\n' "${conf[@]}" | column -t >&2
           exit 2 ;;
    esac
fi

msg2 "Using [$repo] repository"
root=$(readlink -env -- "$root")

if [[ -d $root ]]; then
    if ! [[ -w $root && -r $root ]]; then
        error "$argv0: $root: permission denied (read-write)"
        exit 13
    fi
else
    error "$argv0: $root: not a directory"
    exit 20
fi

mkdir -p "$AURDEST"/snapshot
chmod -c 700 "$AURDEST"

tmp=$(mktemp -dt "$argv0".XXXXXXXX); readonly tmp
trap 'trap_exit' EXIT

cd_safe "$tmp"
mkdir {tsv,json,patch}

if ((update)); then
    aurcheck -d "$repo" -r "$root" -q
fi > check

mapfile -t < check

if ! (($# + ${#MAPFILE[@]})); then
    plain "there is nothing to do"
    exit 0
fi

msg "Resolving dependencies..."
aurchain -a -t "$tmp" -- "$@" "${MAPFILE[@]}" > queue_0
json_set=(json/*)

if ! ((${#json_set[@]})); then
    error "$argv0: no data available"
    exit 61
fi

jq -r '.results[] | [.Name,.PackageBase]    | @tsv' "${json_set[@]}" > tsv/pkgbase
jq -r '.results[] | [.Name,.Version]        | @tsv' "${json_set[@]}" > tsv/pkgver
jq -r '.results[] | [.PackageBase,.URLPath] | @tsv' "${json_set[@]}" > tsv/urlpath

# pkgname -> pkgbase
lib32 queue_0 | ign | sub tsv/pkgbase - > queue_1

if ((chkver)); then
    aurcheck -d "$repo" -r "$root" -c < tsv/pkgver | sub tsv/pkgbase -
fi > sift

if ! grep -Fxvf sift queue_1 > queue; then
    plain "there is nothing to do"
    exit 0
fi

if ((snapshot)); then
    cd_safe "$AURDEST"/snapshot

    if ((download)); then
        msg "Retrieving build files..."
        match_urlpath "$tmp"/queue "$tmp"/urlpath | aurfetch -t
    fi
else
    cd_safe "$AURDEST"

    if ((download)); then
        msg "Retrieving build files..."
        aurfetch -L "$tmp"/patch < "$tmp"/queue
    fi
fi

# View changes and build files in one window (#77)
if ((view)); then
    printf '%s\n' "$tmp"/patch/* | cat - "$tmp"/queue \
        | xargs -I{} find {} -maxdepth 1 | viewer
fi

if ((build)); then
    aurbuild_args+=(-d "$repo" -r "$root" -a "$tmp"/queue)
    aurbuild "${aurbuild_args[@]}" -- "${makepkg_args[@]}"
else
    xargs printf -- "$(pwd -P)/%s\n" < "$tmp"/queue
fi

# vim: set et sw=4 sts=4 ft=sh:

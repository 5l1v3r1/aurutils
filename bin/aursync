#!/bin/bash
#shellcheck disable=SC2154
readonly argv0=aursync
readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
readonly AURDEST=${AURDEST:-$XDG_CACHE_HOME/$argv0}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail -o noclobber

declare -a makepkg_args=() aurbuild_args=()
declare -i view=1 chkver=1 update=0 snapshot=0 chroot=0 rotate=0
declare -i confirm=1 bindro=0 force=0 keep=0 chtemp=0
declare ignfile= root= repo= newdir=

viewer() {
    if hash 2>/dev/null vifm; then
        vifm - '+view!'
    else
        command -- "${PAGER:-less}"
    fi
}

sub() {
    awk 'NR == FNR {
        x[$1] = $2; next
    } {
        if ($1 in x && !(x[$1] in seen)) {
            print x[$1]; seen[x[$1]];
        }
    }' "$@"
}

lib32() {
    awk -v arch="$(uname -m)" '{
        if(arch == "i686") {
            gsub(/^lib32-/,""); gsub(/^gcc-multilib$/,"")
        }; print
    }' "$@"
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-c] [-B newdir] [-CfnstT] [-u] [--] pkgname..."
    exit 1
}

source /usr/share/makepkg/util.sh

if [[ -t 2 ]]; then
    colorize
fi

if getopt -T || (($? != 4)); then
    error "$argv0: util-linux getopt required"
    exit 22
fi

longopts=allan,bind:,chroot,container:,force,keep,help,ignore:,no-ver,no-view,sign,tar,temp,repo:,root:,update

if TEMP=$(getopt -o B:cC:fhknstTu -l "$longopts" -n "$argv0" -- "$@"); then
    eval set -- "$TEMP"
else
    usage
fi

while true; do
    case "$1" in
        -B|--bind)      bindro=1; newdir=$2;        shift 2 ;;
        -f|--force)     force=1;                    shift   ;;
        -k|--keep)      keep=1;                     shift   ;;
        -n)             confirm=0;                  shift   ;;
        -T|--temp)      chtemp=1;                   shift   ;;
        -u|--update)    update=1;                   shift   ;;
        -t|--tar)       snapshot=1;                 shift   ;;
        -c|--chroot)    chroot=1;
                        aurbuild_args+=(-c);        shift   ;;
        -C|--container) chroot=1;
                        aurbuild_args+=(-C "$2");   shift 2 ;;
        -s|--sign)      aurbuild_args+=(-s);        shift   ;;
        --allan)        rotate=1;                   shift   ;;
        --ignore)       ignfile=$2;                 shift 2 ;;
        --no-ver)       chkver=0;                   shift   ;;
        --no-view)      view=0;                     shift   ;;
        --root)         root=$2;                    shift 2 ;;
        --repo)         repo=$2;                    shift 2 ;;
         -h|--help)     usage ;;
        --) shift; break ;;
    esac
done

tmp=$(mktemp -dt "$argv0".XXXXXXXX)
trap 'trap_exit' EXIT

if ((rotate)); then
    if { hash rot13 && target=$(aurgrep .+ | shuf -n 1); } 2>/dev/null; then
        exec bash -c "{ \"$argv0\" -c \"$target\" && repo-elephant | rot13; } 2>&1 | rot13"
    else
        echo '?'; exit 16 # EBUSY
    fi
fi

if ! (($# + update)); then
    error "$argv0: no targets specified"
    exit 1
fi

# Set makepkg args in a new list to ensure option context is already
# defined, as getopt parses options from left to right.
if ((chroot)); then
    makepkg_args=(-cnu)
    ((bindro))  && makepkg_args+=(-D "$newdir")
    ((chtemp))  && makepkg_args+=(-T)
else
    makepkg_args=(-Lcs)
    ((force))   && makepkg_args+=(-f)
    ((confirm)) || makepkg_args+=(--noconfirm)
    ((keep))    || makepkg_args+=(-r)
fi

if [[ $repo ]]; then
    if [[ ! $root ]]; then
        root=$(pacconf --single --repo="$repo" Server)
        root=${root#*://}
    fi
else
    declare -A avail

    while IFS= read -r repo; do
        server=$(pacconf --single --repo="$repo" Server)
        if [[ $server =~ ^file:// ]]; then
            avail[$repo]=${server#*://}
        fi
    done < <(pacconf --repo-list)

    if [[ ${avail[@]} ]]; then
        if [[ ${#avail[@]} -gt 1 ]]; then
            PS3='Select a repository: '
            select repo in "${!avail[@]}"; do
                if [[ -n $repo ]]; then
                    break
                fi
            done
        else
            repo=${!avail[*]}
        fi
    else
        error "$argv0: no file:// repository found"
        exit 2
    fi
    root=${avail[$repo]}
fi

root=$(realpath -e -- "$root")

if [[ ! -w $root/ || ! -r $root/ ]]; then
    error "$argv0: $root: permission denied"
    exit 13
fi

if ! pacconf --null CacheDir | xargs -0 realpath | grep -qx -- "$root"; then
    warning "$argv0: repository path $root is not a cache directory"
fi

msg2 "Using [$repo] repository"

if ((update)); then 
    readarray -t new < <(aurcheck -d "$repo" -q); wait "$!"
    set -- "$@" "${new[@]}"

    if ((!$#)); then
        plain "there is nothing to do"; exit
    fi
fi

if [[ $ignfile ]]; then
    ign() { grep -Exvf "$ignfile" - ; }
else
    ign() { tee; }
fi

mkdir -p "$AURDEST"/snapshot
chmod -c 700 "$AURDEST"

cd_safe "$tmp"
mkdir {tsv,json,patch}

msg "Resolving dependencies..."
aurchain -a -t "$tmp" -- "$@" > queue_0
json_set=("$tmp"/json/*)

jq -r '.[].results[] | [.Name,.PackageBase]    | @tsv' "${json_set[@]}" > tsv/pkgbase
jq -r '.[].results[] | [.Name,.Version]        | @tsv' "${json_set[@]}" > tsv/pkgver
jq -r '.[].results[] | [.PackageBase,.URLPath] | @tsv' "${json_set[@]}" > tsv/urlpath

# pkgname -> pkgbase
lib32 queue_0 | ign | sub tsv/pkgbase - > queue_1

if ((chkver)); then
    aurcheck -d "$repo" -r "$root" -c < tsv/pkgver | sub tsv/pkgbase -
fi >sift_1

if ! grep -Fxvf sift_1 queue_1 > queue; then
    plain "there is nothing to do"; exit
fi

msg "Retrieving build files..."
if ((snapshot)); then
    cd_safe "$AURDEST"/snapshot
    awk 'NR == FNR {x[$0]; next} $1 in x {print $2}' \
        "$tmp"/queue "$tmp"/tsv/urlpath | aurfetch -t
else
    cd_safe "$AURDEST"
    aurfetch -L "$tmp"/patch < "$tmp"/queue
fi

# View changes and build files in one window (#77)
if ((view)); then
    ( shopt -s nullglob
      printf '%s\n' "$tmp"/patch/* | cat - "$tmp"/queue \
          | xargs -I{} find {} -maxdepth 1 | viewer
    )
fi

aurbuild_args+=(-d "$repo" -r "$root" -a "$tmp"/queue)
aurbuild "${aurbuild_args[@]}" -- "${makepkg_args[@]}"

# vim: set et sw=4 sts=4 ft=sh:

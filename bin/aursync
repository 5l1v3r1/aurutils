#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail -o noclobber

argv0=aursync
aurweb=https://aur.archlinux.org
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX)
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
AURDEST=${AURDEST:-$XDG_CACHE_HOME/$argv0}

readonly argv0 aurweb tmp XDG_CACHE_HOME AURDEST

declare -i insecure=0 nobuild=0 noversion=0 nodeps=0 nofetch=0 # disable flags
declare -i update=0 ignore=0 snapshot=0 # feature flags
declare -i chroot=0 bindro=0 force=0 logdest=0 namcap=0 chtemp=0 # makepkg flags

viewer() {
    if hash 2>/dev/null vifm; then
        vifm - '+view!'
    else
        command -- "${PAGER:-less}"
    fi
}

inspect() {
    xargs -i find {} -maxdepth "$1" | viewer
}

revcheck() {
    #global aurweb tmp
    git fetch -v

    if ! git remote get-url --all origin | grep -Fq "${aurweb#*//}"; then
        warning "remote does not match ${aurweb#*//}"
    fi

    # git fetch will return 0 even if nothing was fetched.
    if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
        git --no-pager log --patch --stat '..@{upstream}' >> "$tmp/$1".diff
        git reset --hard HEAD
        git merge
    fi
}

clone() {
    #global aurweb nofetch
    declare base

    while read -r base _; do
        if [[ -d $base/.git ]]; then
            if ! ((nofetch)); then
                GIT_DIR="$base"/.git GIT_WORK_TREE="$base" revcheck "$base"
            fi
        else
            git clone "$aurweb/$base".git
        fi
    done
}

aria() {
    #global aurweb tmp
    awk -v uri="$aurweb"/cgit/aur.git/snapshot '{
        gsub("+","%2b")
        gsub("@","%40")

        printf "%s/%s.tar.gz\n", uri, $1
    }' | aria2c -d "$tmp" -i -

    for ar in "$tmp"/*.tar.gz; do
        tar xvf "$ar"
    done
}

download() {
    #global snapshot
    if ((snapshot)); then
        cd "$AURDEST"/snapshot
        aria
    else
        cd "$AURDEST"
        clone
    fi
}

gendeps() {
    #global print
    if ((nodeps)); then
        printf '%s\n' -- "$@"
    else
        aurchain -a "$@"
    fi
}

ignorepkg() {
    #global ignore
    if ((ignore)); then
        aursift -I
    else
        tee
    fi
}

i686() {
    awk -v arch="$(uname -m)" '{
        if(arch == "i686") {
            gsub(/^lib32-/,"")
            gsub(/^gcc-multilib$/,"")
        };  print
    }'
}

brokeit() {
    if { hash rot13 && target=$(aursearch -q .+ | shuf -n 1); } 2>/dev/null; then
        exec "$argv0" -cn "$target" 2>&1 | rot13
    else
        echo '?'; exit 16 # EBUSY
    fi
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts :B:cdfLntTu-: OPT; do
    case "$OPT" in
        B|+B) bindro=1
              newdir=$OPTARG ;;
        c|+c) chroot=1       ;;
        f|+f) force=1        ;;
        L|+L) logdest=1      ;;
        n|+n) namcap=1       ;;
        t|+t) snapshot=1     ;;
        T|+T) chtemp=1       ;;
        u|+u) update=1       ;;
        -) case "$OPTARG" in
               chroot)    chroot=1    ;;
               ignore)    ignore=1    ;;
               insecure)  insecure=1  ;;
               nobuild)   nobuild=1   ;;
               nodeps)    nodeps=1    ;;
               nofetch)   nofetch=1   ;;
               noversion) noversion=1 ;;
               tar)       snapshot=1  ;;
               update)    update=1    ;;
               allan)     brokeit     ;;
           esac   ;;
        *) plain "usage: $argv0 [-c] [-B newdir] [-dfLntT] [-u] [--] pkgname..."
           exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# Set makepkg args in a new list to ensure option context is already
# defined, as getopts parses options sequentially.
if ((chroot)); then
    ((bindro))  && makepkg_args+=(-D "$newdir")
    ((chtemp))  && makepkg_args+=(-T)
    ((namcap))  && makepkg_args+=(-n)
else
    ((force))   && makepkg_args+=(-f)
    ((logdest)) && makepkg_args+=(-L)
    ((namcap))  && makepkg_args+=(--noconfirm)
fi

# Only select a repository when building (#127)
if ! ((nobuild)) || ((update)); then
    read -r repo root < <(repofind -s)

    # Select a cache directory as package pool (#105)
    read -r pool < <(pacconf CacheDir | grep -m1 -Eo ".+/$repo/$")

    msg2 "Using [$repo] repository"

    if [[ ! -d $root ]]; then
        error "$argv0: $root: not a directory"
        exit 20
    fi

    if [[ ! -w $root ]]; then
        error "$argv0: $root: permission denied"
        exit 13
    fi

    if [[ ! -d $pool ]]; then
        error "$argv0: $pool: not a directory"
        exit 20
    fi

    if [[ ! -w $pool ]]; then
        error "$argv0: $pool: permission denied"
        exit 13
    fi
fi

# Reuse selection for repofind (#82)
if ((update)); then
    for p in $(aurcheck -q "$repo"); do
        set -- "$@" "$p"
    done

    if ((!$#)); then
        plain "there is nothing to do"
        exit 0
    fi
fi

if ((!$#)); then
    error "$argv0: no targets specified"
    exit 1
fi

# Use a separate tar directory to prevent conflicts with git.
mkdir -p "$AURDEST"/snapshot
chmod -c 700 "$AURDEST"

# Save temporary files in directories by context
mkdir "$tmp"/{aur,sync,tsort}

# Retrieve the full AUR dependency tree and corresponding metadata.
msg "Resolving dependencies..."
gendeps "$@" | ignorepkg | tee "$tmp"/tsort/tree | xargs -r aursearch -Fr > "$tmp"/aur/json

# Create pkgname/pkgbase and pkgname/pkgver pairs.
jshon -F "$tmp"/aur/json -a -e results -a -e Name -u > "$tmp"/aur/pkgname
jshon -F "$tmp"/aur/json -a -e results -a -e Name -u -p -e PackageBase -u | xargs -n2 > "$tmp"/aur/pkgbase
jshon -F "$tmp"/aur/json -a -e results -a -e Name -u -p -e Version -u | xargs -n2 > "$tmp"/aur/pkgver

# Warn on packages missing in both official repositories and AUR (#67)
if grep -Fxvf "$tmp"/aur/pkgname <(aursift -S < "$tmp"/tsort/tree) > "$tmp"/lost; then
    while read -r pkg; do
        warning "no results found for $pkg"
    done < "$tmp"/lost
fi

# XXX: Packages without lib32 prefix are not necessarily in the AUR.
grep -Fxf "$tmp"/aur/pkgname "$tmp"/tsort/tree | i686 | aursplit "$tmp"/aur/pkgbase > "$tmp"/tsort/pkgbase

# Download build files by pkgbase.
msg "Retrieving build files..."
download < "$tmp"/tsort/pkgbase

if ! ((noversion)); then
    # Print updated pkgbase from versioned pairs.
    aursift -U < "$tmp"/aur/pkgver | aursplit "$tmp"/aur/pkgbase > "$tmp"/sync/pkgbase

    # Relative complement: pkgbase (tsort) \ pkgbase (sync)
    if ! grep -Fxvf "$tmp"/sync/pkgbase "$tmp"/tsort/pkgbase > "$tmp"/queue; then
        plain "there is nothing to do"
        exit 0
    fi
else
    cp -sv "$tmp"/tsort/pkgbase "$tmp"/queue
fi

# View changes and build files in one window (#77)
if ! ((insecure)); then
    ( shopt -s nullglob
      printf '%s\n' "$tmp"/*.diff | cat - "$tmp"/queue | inspect 1
    )
fi

if ((nobuild)); then
    msg "Files downloaded to $PWD"
    exit 0
fi

if ((chroot)); then
    aurbuild_args+=(-c)
fi

aurbuild_args+=(-d "$repo" -r "$root" -p "$pool" -a "$tmp"/queue)
aurbuild "${aurbuild_args[@]}" -- "${makepkg_args[@]}"

# vim: set et sw=4 sts=4 ft=sh:

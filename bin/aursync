#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail -o noclobber

argv0=aursync
aurweb=https://aur.archlinux.org
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX)
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
AURDEST=${AURDEST:-$XDG_CACHE_HOME/$argv0}

readonly argv0 aurweb tmp XDG_CACHE_HOME AURDEST

# Default options
declare -i chroot=0 insecure=0 nobuild=0 noversion=0 update=0
declare -i bindro=0 force=0 logdest=0 namcap=0 chtemp=0
declare deps=aurchain download=clone ignore=tee

viewer() {
    if hash 2>/dev/null vifm; then
        vifm - '+view!'
    else
        command -- "${PAGER:-less}"
    fi
}

inspect() {
    xargs -i find {} -maxdepth "$1" | viewer
}

revcheck() {
    #global aurweb tmp
    git fetch -v

    if ! git remote get-url --all origin | grep -Fq "${aurweb#*//}"; then
        warning "remote does not match ${aurweb#*//}"
    fi

    # git fetch will return 0 even if nothing was fetched.
    if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
        git --no-pager log --patch --stat '..@{upstream}' >> "$tmp/$1".diff
        git reset --hard HEAD
        git merge
    fi
}

clone() {
    #global aurweb
    declare b

    while read -r b _; do
        if [[ -d $b/.git ]]; then
            GIT_DIR="$b"/.git GIT_WORK_TREE="$b" revcheck "$b"
        else
            git clone "$aurweb/$b".git
        fi
    done
}

aria() {
    #global aurweb tmp
    awk -v uri="$aurweb"/cgit/aur.git/snapshot '{
        gsub("+","%2b")
        gsub("@","%40")

        printf "%s/%s.tar.gz\n", uri, $1
    }' | aria2c -d "$tmp" -i -

    for ar in "$tmp"/*.tar.gz; do
        tar xvf "$ar"
    done
}

print() {
    printf '%s\n' -- "$@"
}

# Skip packages in IgnorePkg (#128)
sift() {
    aursift -I
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts :B:cdfIkLntTuvw OPT; do
    case $OPT in
        B|+B) bindro=1
              newdir=$OPTARG  ;;
        c|+c) chroot=1        ;;
        d|+d) deps=print      ;;
        f|+f) force=1         ;;
        I|+I) ignore=sift     ;;
        k|+k) insecure=1      ;;
        L|+L) logdest=1       ;;
        n|+n) namcap=1        ;;
        t|+t) download=aria   ;;
        T|+T) chtemp=1        ;;
        u|+u) update=1        ;;
        v|+v) noversion=1     ;;
        w|+w) nobuild=1       ;;
        *) plain "usage: $argv0 [-c] [-B newdir] [-u] [-dfIkLntTvw] [--] pkgname..."
           exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# Set makepkg args in a new list to ensure option context is already
# defined, as getopts parses options sequentially.
if ((chroot)); then
    ((bindro))  && makepkg_args+=(-D "$newdir")
    ((chtemp))  && makepkg_args+=(-T)
    ((namcap))  && makepkg_args+=(-n)
else
    ((force))   && makepkg_args+=(-f)
    ((logdest)) && makepkg_args+=(-L)
    ((namcap))  && makepkg_args+=(--noconfirm)
fi

# Only select a repository when building (#127)
if ! ((nobuild)) || ((update)); then
    read -r repo root < <(repofind -s)

    # Select a cache directory as package pool (#105)
    read -r pool < <(pacconf CacheDir | grep -m1 -Eo ".+/$repo/$")

    msg2 "Using [$repo] repository"

    if [[ ! -d $root ]]; then
        error "$argv0: $root: not a directory"
        exit 20
    fi

    if [[ ! -w $root ]]; then
        error "$argv0: $root: permission denied"
        exit 13
    fi

    if [[ ! -d $pool ]]; then
        error "$argv0: $pool: not a directory"
        exit 20
    fi

    if [[ ! -w $pool ]]; then
        error "$argv0: $pool: permission denied"
        exit 13
    fi
fi

# Reuse selection for repofind (#82)
if ((update)); then
    for p in $(aurcheck -q "$repo"); do
        set -- "$@" "$p"
    done

    if ((!$#)); then
        plain "there is nothing to do"
        exit 0
    fi
fi

if ((!$#)); then
    error "$argv0: no targets specified"
    exit 1
fi

# Use a separate tar directory to prevent conflicts with git.
mkdir -p "$AURDEST"/snapshot
chmod -c 700 "$AURDEST"

if [[ $download == aria ]]; then
    cd "$AURDEST"/snapshot
else
    cd "$AURDEST"
fi

# Save temporary files in directories by context
mkdir "$tmp"/{struct,sync,tsort}

# Copy the queue and dependency tree for later processing, and
# retrieve AUR metadata.
"${deps:-aurchain}" "$@" | "${ignore:-tee}" | tee "$tmp"/tsort/pkgname | xargs -r aursearch -Fr > "$tmp"/aur.json

# Create pairs of pkgname and pkgbase, and pkgname and pkgver.
jshon -F "$tmp"/aur.json -a -e results -a -e Name -u -p -e PackageBase -u | xargs -n2 > "$tmp"/struct/pkgbase
jshon -F "$tmp"/aur.json -a -e results -a -e Name -u -p -e Version -u | xargs -n2 > "$tmp"/struct/pkgver

# Replace package name with package base, preserving order, copy
# results, and download build files.
aursplit "$tmp"/struct/pkgbase < "$tmp"/tsort/pkgname | tee "$tmp"/tsort/pkgbase | "${download:-clone}"

if ! ((noversion)); then
    # Print updated pkgbase from versioned pairs.
    aursift -U < "$tmp"/struct/pkgver | aursplit "$tmp"/struct/pkgbase > "$tmp"/sync/pkgbase

    # Relative complement: pkgbase (tsort) \ pkgbase (sync)
    if ! grep -Fxvf "$tmp"/sync/pkgbase "$tmp"/tsort/pkgbase > "$tmp"/queue; then
        plain "there is nothing to do"
        exit 0
    fi
else
    cp -sv "$tmp"/tsort/pkgbase "$tmp"/queue
fi

# View changes and build files in one window (#77)
if ! ((insecure)); then
    ( shopt -s nullglob
      printf '%s\n' "$tmp"/*.diff | cat - "$tmp"/queue | inspect 1
    )
fi

if ((nobuild)); then
    msg "Files downloaded to $PWD"
    exit 0
fi

if ((chroot)); then
    aurbuild_args+=(-c)
fi

aurbuild_args+=(-d "$repo" -r "$root" -p "$pool" -a "$tmp"/queue)
aurbuild "${aurbuild_args[@]}" -- "${makepkg_args[@]}"

# vim: set et sw=4 sts=4 ft=sh:

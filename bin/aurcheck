#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=aurcheck
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit

readonly PS4 argv0 tmp
declare -i all=0

syncver() {
    # XXX: If pacsift/expac find a package with UTF-8 characters,
    # this package and any that follow it are not processed.
    pacman -Sl "$1" | awk '{printf "%s/%s\n", $1, $2}' | pacman -Sddp --print-format '%n %v' -
}

aurver() {
    jshon -QC -a -e results -a -e Name -u -p -e Version -u | xargs -n2
}

f1() {
    awk '{print $1}' "$@"
}

quickcheck() {
    #global all tmp
    declare pkg ver_s ver_a argv

    syncver "$1" | sort -k 1b,1 > "$tmp"/struct_s

    # xargs does not preserve exit status, but returns 123 if any
    # command failed with status 1-125.
    readarray -t argv < <(f1 "$tmp"/struct_s)

    if aursearch -Fr "${argv[@]}" | aurver | sort -k 1b,1 > "$tmp"/struct_a; then
        # Join on first field (pkgname)
        join "$tmp"/struct_s "$tmp"/struct_a > "$tmp"/struct

        # Notify if packages are not in AUR (#110)
        grep -Fxvf <(f1 "$tmp"/struct_a) <(f1 "$tmp"/struct_s) | while read -r pkg; do
            plain "$pkg is not present in AUR"
        done
    else
        # The status of aursearch is of special interest, rather than
        # the rightmost failed command.
        exit "${PIPESTATUS[0]}"
    fi

    while read -r pkg ver_s ver_a; do
        case $(vercmp "$ver_s" "$ver_a") in
            -1) printf '%s %s -> %s\n' "$pkg" "$ver_s" "$ver_a" ;;
            0)  if ((all)); then
                    printf '%s %s = %s\n' "$pkg" "$ver_s" "$ver_a"
                fi ;;
            1)  if ((all)); then
                    printf '%s %s <- %s\n' "$pkg" "$ver_s" "$ver_a"
                fi ;;
        esac
    done < "$tmp"/struct
}

usage() {
    plain "usage: $argv0 [-a] [-q] repository"
    exit 1
}

trap_exit() {
    if [[ -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

trap 'trap_exit' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :ahq OPT; do
    case $OPT in
        a|+a) all=1    ;;
        q|+q) parse=f1 ;;
        h|+h) usage    ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

((!$#)) && usage

quickcheck "$1" | "${parse:-tee}"

# vim: set et sw=4 sts=4 ft=sh:

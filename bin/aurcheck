#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=aurcheck
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit
declare all=0 quiet=0 database=
declare -r PS4 argv0 tmp

aurver() {
    jq -r '.[].results[] | [.Name,.Version,.Maintainer] | @tsv'
}

quickcheck() {
    declare geq=$1 pkg ver_pkg ver_aur op

    sort -k 1b,1 > pkg.tsv

    if awk '{print $1}' pkg.tsv | xargs -r aursearch -Fr | \
        aurver | sort -k 1b,1 > aur.tsv
    then
        join -v 2 -o 2.1 aur.tsv pkg.tsv | while IFS= read -r; do
            plain "$REPLY is not present in AUR"
        done

        awk '{if(!$3) {print $1};}' aur.tsv | while IFS= read -r; do
            plain "$REPLY is orphaned in AUR"
        done
    else
        exit
    fi

    while read -r pkg ver_pkg ver_aur _; do
        op=$(vercmp "$ver_pkg" "$ver_aur")

        if ((!geq && op > -1)); then
            continue
        fi

        set -- "$pkg" "$ver_pkg" "$ver_aur"

        case "$op" in
            -1) printf '%s %s -> %s\n' "$1" "$2" "$3" ;;
            0)  printf '%s %s = %s\n'  "$1" "$2" "$3" ;;
            1)  printf '%s %s <- %s\n' "$1" "$2" "$3" ;;
        esac
    done < <(join pkg.tsv aur.tsv)
}

syncver() {
    if [[ $1 ]]; then
        pacman -Sl "$1" | awk '{print $2, $3}' || exit
    else
        tee
    fi
}

first() {
    if (( $1 )); then
        awk '{print $1}'
    else
        tee
    fi
}

usage() {
    plain "usage: $argv0 [-aq] -d repository"
    exit 1
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

trap 'trap_exit' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :ad:q OPT; do
    case $OPT in
        a) all=1 ;;
        d) database=$OPTARG ;;
        q) quiet=1 ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

cd_safe "$tmp"

syncver "$database" | quickcheck "${all:-0}" | first "${quiet:-0}"

# vim: set et sw=4 sts=4 ft=sh:

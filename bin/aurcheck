#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=aurcheck
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit
declare -i all=0
declare -r PS4 argv0 tmp

repover() {
    declare database=$1 root=$2
    repose --list --root="$root" "$database"
}

aurver() {
    jq -r '.[].results[] | [.Name,.Version] | @tsv'
}

f1() {
    awk '{print $1}' "$@"
}

quickcheck() {
    declare database=$1 root=$2 geq=$3
    declare pkg ver_sync ver_aur op

    repover "$database" "$root" | sort -k 1b,1 > sync.tsv

    if f1 sync.tsv | xargs -r aursearch -Fr | aurver | sort -k 1b,1 > aur.tsv; then
        join sync.tsv aur.tsv > join.tsv

        grep -Fxvf <(f1 aur.tsv) <(f1 sync.tsv) | while read -r pkg; do
            plain "$pkg is not present in AUR"
        done
    else
        exit
    fi

    while read -r pkg ver_sync ver_aur; do
        op=$(vercmp "$ver_sync" "$ver_aur")

        if ((!geq && op > -1)); then
            continue
        fi

        set -- "$pkg" "$ver_sync" "$ver_aur"

        case "$op" in
            -1) printf '%s %s -> %s\n' "$1" "$2" "$3" ;;
            0)  printf '%s %s = %s\n'  "$1" "$2" "$3" ;;
            1)  printf '%s %s <- %s\n' "$1" "$2" "$3" ;;
        esac
    done < join.tsv
}

usage() {
    plain "usage: $argv0 [-aq] [-r root] repository"
    exit 1
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

trap 'trap_exit' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :ahqr: OPT; do
    case $OPT in
        a) all=1    ;;
        q) parse=f1 ;;
        h) usage    ;;
        r) root=$OPTARG ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

((!$#)) && usage

if [[ $root ]]; then
    root=$(realpath -e -- "$root") || exit
else
    root=$(pacconf --single --repo="$database" Server) || exit
fi

cd_safe "$tmp"
quickcheck "$1" "${root#*://}" "${all:-0}" | "${parse:-tee}"

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
readonly argv0=aurcheck
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

declare -i geq=0 cmp=0 ver=1

my_vercmp() {
    if [[ $2 ]]; then
        if [[ $1 != "$2" ]]; then
            vercmp "$1" "$2"
        else
            printf '%d' '0'
        fi
    else
        printf '%d' '2'
    fi
}

namever() {
    jq -er '.[].results[] | [.Name,.Version] | @tsv'
}

syncver() {
    # Use --exact as repos may have a common substring (#166)
    pacsift --exact --repo="$1" --null <&- | xargs -0r pacman -Sddp --print-format '%n %v'
}

# $1: path to database
repo_list() {
    bsdcat "$1" | awk '/%NAME%/    {getline; printf("%s\t", $1)}
                       /%VERSION%/ {getline; printf("%s\n", $1)}'
}

# $1: path to database
repo_equal_or_newer() {
    sort -k 1b,1 | join -a 1 - <(repo_list "$1" | sort -k 1b,1) | while {
        read -r pkg v_in v_cmp _
    } do
        op=$(my_vercmp "$v_in" "$v_cmp")
 
        case $op in
            -1) warning "$pkg $v_cmp is newer than $v_in"
                printf '%s\n' "$pkg" ;;
             0) printf '%s\n' "$pkg" ;;
             1) msg2 "$pkg $v_cmp -> $v_in" ;;
             2) msg2 "$pkg N/A -> $v_in" ;;
        esac
    done
}

quickcheck() { 
    tee "$tmp"/db | awk '{print $1}' | xargs -r aursearch -Fr | namever > "$tmp"/aur

    sort -k 1b,1 "$tmp"/db | join -a 1 - <(sort -k 1b,1 "$tmp"/aur) | while {
        read -r pkg v_in v_cmp _
    } do
        op=$(my_vercmp "$v_in" "$v_cmp")
        
        if ((op == 2 && geq < 2)) || ((op > -1 && !geq)); then
            continue
        fi

        if ((!ver)); then
            printf '%s\n' "$pkg"
        else
            case "$op" in
                -1) printf '%s %s -> %s\n' "$pkg" "$v_in" "$v_cmp" ;;
                 0) printf '%s %s = %s\n'  "$pkg" "$v_in" "$v_cmp" ;;
                 1) printf '%s %s <- %s\n' "$pkg" "$v_in" "$v_cmp" ;;
                 2) printf '%s (not available)' "$pkg" ;;
            esac
        fi
    done
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-aclq] [-d repository] [-r root]"
    exit 1
}

readonly -f my_vercmp namever syncver repo_list repo_equal_or_newer quickcheck trap_exit usage

source /usr/share/makepkg/util.sh || exit

if [[ -t 2 ]]; then
    colorize
fi

unset db root
while getopts :acd:lqr: OPT; do
    case $OPT in
        a) ((geq++))    ;;
        c) cmp=1        ;;
        d) db=$OPTARG   ;;
        l) cmp=2        ;;
        q) ver=0        ;;
        r) root=$OPTARG ;;
        *) usage        ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

tmp=$(mktemp -dt "$argv0".XXXXXXXX) || exit
trap 'trap_exit' EXIT

if ((cmp)); then
    root=${root-$(pacconf --single --repo="$db" Server)} || exit
    if ((list == 1)); then
        repo_equal_or_newer "${root#*://}/$db".db
    else
        repo_list "${root#*://}/$db".db
    fi  
else
    if [[ -v db ]]; then
        syncver "$db" | quickcheck
    else
        quickcheck
    fi
fi

# vim: set et sw=4 sts=4 ft=sh:

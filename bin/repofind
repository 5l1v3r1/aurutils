#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=repofind
tmp=$(mktemp -d) || exit

readonly argv0 tmp

repofind() {
    declare repo
    declare -A rset

    for repo in $(pacconf --repo-list); do
        rset[$repo]=$(pacconf --single --repo="$repo" Server)

        if [[ ${rset[$repo]} =~ file:// ]]; then
            printf '%s %s\n' "$repo" "${rset[$repo]}"
        fi
    done
}

reposelect() {
    declare repo server pool
    declare -A avail

    while read -r repo server; do
        avail[$repo]=$server
    done < <(repofind)

    if ((${#avail[@]} > 1)); then
        select repo in "${!avail[@]}"; do
            break
        done
    elif [[ ${avail[@]} ]]; then
        repo=${!avail[*]}
    else
        error "$argv0: no file:// repository"
        exit 2
    fi

    pool=${avail[$repo]#file://}

    if [[ ! -d $pool ]]; then
        error "$argv0: $pool: not a directory"
        exit 20
    fi

    if [[ ! -w $pool ]]; then
        error "$argv0: $pool: permission denied"
        exit 13
    fi

    msg2 "Using [$repo] repository"
    printf '%s %s\n' "$repo" "$pool"
}

namever() {
    jshon -Q -a -e results -a -e Name -u -p -e Version -u | xargs -n2
}

quickcheck() {
    declare pkg ver_r ver_a argv

    # Check if the repo is configured.
    pacconf --repo="$1" >/dev/null || exit $?

    # pacsift prints "repo/package" pairs, so expac results are
    # constrained to a given repo. Use xargs -r as expac -S lists all
    # sync packages if stdin is empty.
    pacsift --exact --repo="$1" | xargs -r expac -S '%n %v' > "$tmp"/struct_r

    # xargs does not preserve exit status, but returns 123 if any
    # command failed with status 1-125.
    readarray -t argv < <(awk '{print $1}' "$tmp"/struct_r)

    # With pipefail, the exit status of the pipeline is the value of
    # the last (rightmost) failed command. Here, aursearch is of
    # special interest.
    if aursearch -Fr "${argv[@]}" | namever > "$tmp"/struct_a; then
        join "$tmp"/struct_r "$tmp"/struct_a > "$tmp"/struct
    else
        exit "${PIPESTATUS[0]}"
    fi

    while read -r pkg ver_r ver_a; do
        case $(vercmp "$ver_r" "$ver_a") in
            -1) printf '%s %s -> %s\n' "$pkg" "$ver_r" "$ver_a"
        esac
    done < "$tmp"/struct
}

clean() {
    declare repo
    read -r repo _ < <(reposelect)

    paccache -rk0 "$(pacman -Slq "$repo")"
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :cisu: OPT; do
    case $OPT in
        c|+c) clean      ;;
        i|+i) repofind   ;;
        s|+s) reposelect ;;
        u|+u) quickcheck "$OPTARG" ;;
        *)    plain "usage: $argv0 [+-cisu ARG} [--] ARGS..."
              exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

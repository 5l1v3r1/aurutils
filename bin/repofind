#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=repofind
scheme='file://'
readonly PS4 argv0 scheme

repo_list() {
    #global scheme
    declare repo
    declare -A rset

    for repo in $(pacconf --repo-list); do
        rset[$repo]=$(pacconf --single --repo="$repo" Server)

        if [[ ${rset[$repo]} =~ ^$scheme ]]; then
            printf '%s\t%s\n' "$repo" "${rset[$repo]}"
        fi
    done
}

repo_select() {
    #global scheme
    declare repo server root
    declare -A avail

    while read -r repo server; do
        avail[$repo]=$server
    done < <(repo_list)

    if ((${#avail[@]} > 1)); then
        PS3='Select a repository: '
        select repo in "${!avail[@]}"; do
            break
        done
    elif [[ ${avail[@]} ]]; then
        repo=${!avail[*]}
    else
        error "$argv0: no $scheme repository"
        exit 2
    fi

    root=${avail[$repo]#*://}

    if dir_is_rw "$root"; then
        printf '%s\t%s\n' "$repo" "$root"
    else
        exit $?
    fi
}

repo_path() {
    declare server root

    if server=$(pacconf --single --repo="$1" Server); then
        root=${server#*://}
    else
        exit 22
    fi

    if dir_is_rw "$root"; then
        printf '%s\n' "$root"
    else
        exit $?
    fi
}

repo_canonicalize() {
    declare dest
    dest=$(realpath -e -- "$1")

    if dir_is_rw "$dest"; then
        printf '%s\n' "$dest"
    else
        exit $?
    fi
}

dir_is_rw() {
    if [[ ! -r $1 ]]; then
        error "$argv0: repository path $1 is not readable"
        return 13
    elif [[ ! -w $1 ]]; then
        error "$argv0: repository path $1 is not writeable"
        return 13
    elif [[ ! -d $1 ]]; then
        error "$argv0: repository path $1 is not a directory"
        return 20
    else
        return 0
    fi
}

source /usr/share/makepkg/util.sh || exit

if [[ -t 2 ]]; then
    colorize
fi

while getopts :c:p:ls OPT; do
    case "$OPT" in
        c) repo_canonicalize "$OPTARG" ;;
        l) repo_list ;;
        p) repo_path "$OPTARG" ;;
        s) repo_select ;;
        *) plain "usage: $argv0 [-c <path>] [-l] [-p <repo>] [-s]"
           exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail

argv0=repofind
tmp=$(mktemp -d)

readonly argv0 tmp

repofind() {
    declare repo
    declare -A rset

    for repo in $(pacconf --repo-list); do
	rset[$repo]=$(pacconf --single --repo="$repo" Server)

	if [[ ${rset[$repo]} =~ file:// ]]; then
	    printf '%s %s\n' "$repo" "${rset[$repo]}"
	fi
    done
}

reposelect() {
    declare repo server pool
    declare -A avail
    
    while read -r repo server; do
	avail[$repo]=$server
    done < <(repofind)

    if ((${#avail[@]} > 1)); then
        select repo in "${!avail[@]}"; do
	    break
	done
    elif [[ ${avail[@]} ]]; then
        repo=${!avail[*]}
    else
	error "$argv0: no file:// repository"
        exit 2
    fi

    pool=${avail[$repo]#file://}

    if [[ ! -d $pool ]]; then
        error "$argv0: $pool: not a directory"
        exit 20
    fi

    if [[ ! -w $pool ]]; then
        error "$argv0: $pool: permission denied"
        exit 13
    fi

    msg2 "Using [$repo] repository"
    printf '%s %s\n' "$repo" "$pool"
}

aurver() {
    xargs -r aursearch -Fr | jshon -a -e results -a -e Name -u -p -e Version -u | xargs -n2
}

quickcheck() {
    declare pkg ver_r ver_a

    # Check if the repo is configured.
    pacconf --repo="$1" >/dev/null

    # Repo name/version
    pacsift --exact --repo="$1" | xargs -r expac -S '%n %v' > "$tmp"/struct_r

    # AUR name/version
    awk '{print $1}' "$tmp"/struct_r | aurver > "$tmp"/struct_a

    # Join on common field
    join "$tmp"/struct_r "$tmp"/struct_a > "$tmp"/struct

    while read -r pkg ver_r ver_a; do
        if (($(vercmp "$ver_a" "$ver_r") == 1)); then
            printf '%s\n' "$pkg $ver_r -> $ver_a"
        fi
    done < "$tmp"/struct
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts :isu: OPT; do
    case $OPT in
	i|+i) repofind   ;;
	s|+s) reposelect ;;
	u|+u) quickcheck "$OPTARG" ;;	    
	*)    plain "usage: $argv0 [+-isu ARG} [--] ARGS..."
	      exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o noclobber

argv0=aurchain
multinfo='https://aur.archlinux.org/rpc.php/rpc/?v=5&type=info'
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit

readonly argv0 multinfo tmp
declare -i all=0

curl_safe() {
    curl --retry 3 -fgLsS --compressed "$1" || exit
}

url() {
    awk -v info="$multinfo" '{
        gsub("+","%2b")
        gsub("@","%40")

        if (NR == 1)
            printf "%s&arg[]=%s", info, $1
        else
            printf "&arg[]=%s", $1
    }'
}

count() {
    jshon -QF "$1" -e resultcount
}

pair() {
    for ((i = 0; i < "$1"; ++i)); do
        awk -v FS='[<=>]' 'NR == 1 {p = $1} NR > 1 {
           if($0 != "null") print p, $1; else print p, p
        }' <(jshon -CQF "$2" -e results -e "$i" -e Name -u -p -e Depends -a -u) \
           <(jshon -CQF "$2" -e results -e "$i" -e Name -u -p -e MakeDepends -a -u) \
           <(jshon -CQF "$2" -e results -e "$i" -e Name -u -p -e CheckDepends -a -u)
    done
}

f1() {
    awk '{print $1}' "$@" | sort -u
}

f2() {
    awk '{print $2}' "$@" | sort -u
}

chain() {
    curl_safe "$(printf '%s\n' "$@" | url)" > raw/0

    if [[ $(count raw/0) -lt 1 ]]; then
        error "$argv0: no packages found"
        exit 1
    fi

    for ((a = 1; a <= 30; ++a)); do
        declare -i sub=$((a-1))

        pair "$(count raw/$sub)" raw/$sub > struct/$sub

        f1 struct/$sub >> aur/pkgname
        f1 struct/$sub >> aur/seen

        sort -u struct/$sub >> struct/n

        # Avoid querying duplicates (#4)
        target=$(grep -Fxvf aur/seen <(f2 struct/$sub) | url)

        if [[ $target ]]; then            
            curl_safe "$target" > raw/$a
        else
            break
        fi

        if [[ $(count raw/$a) -lt 1 ]]; then
            break
        else
            f2 struct/$sub >> aur/seen
        fi
    done

    if ((a > 30)); then
        error "$argv0: total requests: $((++a)) (out of range)"
        exit 34
    fi

    # Validate tsort data (#87)
    if datamash -W check < struct/n >/dev/null; then
        tsort struct/n | tac
    else
        error "$argv0: invalid argument"
        exit 22
    fi
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :a OPT; do
    case $OPT in
        a|+a) all=1 ;;
        *) error "usage: $argv0 [-a] pkgname..."
           exit 2
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((!$#)); then
    error "usage: $argv0 pkgname [pkgname...]"
    exit 1
fi

# Save temporary files in directories by context.
cd_safe "$tmp"
mkdir {aur,raw,struct} || exit

# Generate dependency tree and pkgname list (aur/pkgname).
chain "$@" > aur/tree

if ((all)); then
    cat aur/tree
else
    grep -Fxf aur/pkgname aur/tree
fi

# vim: set et sw=4 sts=4 ft=sh:

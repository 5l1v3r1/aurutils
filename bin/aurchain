#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

argv0=aurchain
tmp=$(mktemp -d) || exit

readonly argv0 tmp

curl_safe() {
    curl --retry 3 -sSgL "$@" || exit
}

count() {
    # $1 - request data
    jshon -F "$1" -Qe resultcount
}

pair() {
    # $1 - resultcount
    # $2 - request data
    for ((i = 0; i < "$1"; ++i)); do
        awk -v FS='[<=>]' 'NR == 1 { p = $1 } NR > 1 { print p, $1 }' \
        <(jshon -F "$2" -Qe results -e "$i" -e Name -u -p -e Depends -a -u) \
        <(jshon -F "$2" -Qe results -e "$i" -e Name -u -p -e MakeDepends -a -u) \
        <(jshon -F "$2" -Qe results -e "$i" -e Name -u -p -e CheckDepends -a -u)
    done
}

deps() {
    pair "$(count "$1")" "$1" | awk '{print $2}'
}

request() {
    # Create pairs of package names and their dependencies.
    pair "$(count "$1")" "$1" > pair_all

    # Validate tsort data (#87)
    if datamash -W check < pair_all >/dev/null; then
        tsort pair_all | tac > list_tsort
    else
        error "$argv0: invalid argument"
        exit 22
    fi

    # Create a list of AUR results.
    jshon -F "$1" -e results -a -e Name -u > list_name

    # Warn on packages missing in both official repositories and AUR (#67)
    while read -r pkg; do
        warning "no results found for $pkg"
    done < <(grep -Fxvf list_name <(aursift -S < "$2"))

    # XXX: Packages without lib32 prefix are not necessarily in the AUR.
    grep -Fxf list_name list_tsort | awk -v arch="$(uname -m)" '{
        if(arch == "i686") gsub(/^lib32-/,"")
        print
    }'
}

url() {
    declare str='https://aur.archlinux.org/rpc.php/rpc/?v=5&type=info'

    while read -r p; do
        str+="&arg[]=$p"
    done

    printf '%s' "$str"
}

# Create a copy of the original arguments, and build a matching URL for
# AurJson. If there is at least one result, parse the request data for
# dependencies, append them to the original copy, and build a new
# URL. This continues until a certain maximum is exceeded, or no AUR
# results are found.
chain() {
    curl_safe "$(printf '%s\n' "$@" | tee all | url)" > raw_0

    if [[ $(count raw_0) -lt 1 ]]; then
        error "$argv0: no packages found"
        exit 2
    fi

    for ((a = 1; a <= 100; ++a)); do
        declare -i a_sub=$((--a))
        deps raw_$a_sub > req_$a_sub

        # Remove duplicates to reduce RPC requests (#4)
        curl_safe "$(grep -Fxvf all req_$a_sub | url)" > raw_$a

        if [[ $(count raw_$a) -lt 1 ]]; then
            break
        else
            sort -u req_$a_sub >> all
        fi
    done

    if ((a > 100)); then
        error "$argv0: total requests: $((++a)) (out of range)"
        exit 34
    fi
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

if ((!$#)); then
    error "usage: $argv0 package [package, ...]"
    exit 1
fi

cd "$tmp" || exit

msg "Resolving dependencies..."
chain "$@"

if curl_safe "$(sort -u all | url)" > raw_n; then
    request raw_n all
fi

#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

argv0=aurchain
multinfo='https://aur.archlinux.org/rpc.php/rpc/?v=5&type=info'
tmp=$(mktemp -d "$argv0".XXXXXXXXXX) || exit

readonly argv0 multinfo tmp

curl_safe() {
    curl --retry 3 -sSgL "$@" || exit
}

count() {
    # $1 - request data
    jshon -F "$1" -Qe resultcount
}

pair() {
    # $1 - resultcount
    # $2 - request data
    for ((i = 0; i < "$1"; ++i)); do
        awk -v FS='[<=>]' 'NR == 1 { p = $1 } NR > 1 { print p, $1 }' \
            <(jshon -F "$2" -Qe results -e "$i" -e Name -u -p -e Depends -a -u) \
            <(jshon -F "$2" -Qe results -e "$i" -e Name -u -p -e MakeDepends -a -u) \
            <(jshon -F "$2" -Qe results -e "$i" -e Name -u -p -e CheckDepends -a -u)
    done
}

deps() {
    # $1 - request data
    awk -v FS='[<=>]' '{print $1}' \
        <(jshon -F "$1" -Qe results -a -e Depends -a -u) \
        <(jshon -F "$1" -Qe results -a -e MakeDepends -a -u) \
        <(jshon -F "$1" -Qe results -a -e CheckDepends -a -u)
}

url() {
    awk -v info="$multinfo" '{
        gsub("+","%2b")
        gsub("@","%40")
        
        if (NR == 1)
            printf "%s&arg[]=%s", info, $1
        else
            printf "&arg[]=%s", $1
    }'
}

# Create a copy of the original arguments, and build a matching URL for
# AurJson. If there is at least one result, parse the request data for
# dependencies, append them to the original copy, and build a new
# URL. This continues until a certain maximum is exceeded, or no AUR
# results are found.
chain() {
    curl_safe "$(printf '%s\n' "$@" | tee pkg | url)" > raw/0

    if [[ $(count raw/0) -lt 1 ]]; then
        error "$argv0: no packages found"
        exit 1
    fi

    for ((a = 1; a <= 100; ++a)); do
        declare -i sub=$((--a))
        deps raw/$sub > pkg_$sub

        # Remove duplicates to reduce RPC requests (#4)
        curl_safe "$(grep -Fxvf pkg pkg_$sub | url)" > raw/$a

        if [[ $(count raw/$a) -lt 1 ]]; then
            break
        else
            sort -u pkg_$sub >> pkg
        fi
    done

    if ((a > 100)); then
        error "$argv0: total requests: $((++a)) (out of range)"
        exit 34
    else
        sort -u pkg
    fi
}

dmsort() {
    if datamash -W check < "$1" >/dev/null; then
        tsort "$1" | tac
    else
        error "$argv0: invalid argument"
        exit 22
    fi
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

if ((!$#)); then
    error "usage: $argv0 package [package, ...]"
    exit 1
fi

# Save temporary files in directories by context
if cd "$tmp" && mkdir {list,pair,raw,tsort}; then
    msg "Resolving dependencies..."
    chain "$@" > list/tree
else
    exit
fi

# Retrieve AUR metadata.
curl_safe "$(url < list/tree)" > raw/n

# Create a list of AUR package names.
jshon -F raw/n -e results -a -e Name -u > list/name

# Create pairs of package names and their dependencies.
pair "$(count raw/n)" raw/n > pair/name

# Validate tsort data (#87)
dmsort pair/name | tee tsort/name | aursift -S > list/foreign

# Warn on packages missing in both official repositories and AUR (#67)
grep -Fxvf list/name list/foreign | while read -r p; do
    warning "no results found for $p"
done

# XXX: Packages without lib32 prefix are not necessarily in the AUR.
grep -Fxf list/name tsort/name | awk -v arch="$(uname -m)" '{
    if(arch == "i686") gsub(/^lib32-/,"")
    print
}'

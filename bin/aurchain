#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o noclobber

argv0=aurchain
multinfo='https://aur.archlinux.org/rpc.php/rpc/?v=5&type=info'
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit

readonly argv0 multinfo tmp

curl_safe() {
    curl --retry 3 -sSgL --fail "$1" || exit
}

count() {
    jshon -QF "$1" -e resultcount
}

# XXX: May not work if a package has no dependencies.
pair() {
    for ((i = 0; i < "$1"; ++i)); do
        awk -v FS='[<=>]' 'NR == 1 {p = $1} NR > 1 && !/null/ {print p, $1}' \
            <(jshon -CQF "$2" -e results -e "$i" -e Name -u -p -e Depends -a -u) \
            <(jshon -CQF "$2" -e results -e "$i" -e Name -u -p -e MakeDepends -a -u) \
            <(jshon -CQF "$2" -e results -e "$i" -e Name -u -p -e CheckDepends -a -u)
    done
}

url() {
    awk -v info="$multinfo" '{
        gsub("+","%2b")
        gsub("@","%40")
        
        if (NR == 1)
            printf "%s&arg[]=%s", info, $1
        else
            printf "&arg[]=%s", $1
    }'
}

f1() {
    awk '{print $1}' "$@"
}

f2() {
    awk '{print $2}' "$@"
}

# XXX: Remove redundancy from pkg/.. and struct/.. files (comm?)
chain() {
    curl_safe "$(printf '%s\n' "$@" | tee pkg/n | url)" > raw/0

    if [[ $(count raw/0) -lt 1 ]]; then
        error "$argv0: no packages found"
        exit 1
    fi

    for ((a = 1; a <= 30; ++a)); do
        declare -i sub=$((a-1))

        # Create pairs of packages and their dependencies.
        pair "$(count raw/$sub)" raw/$sub > struct/$sub

        # Make a list of known packages to reduce RPC requests. (#4)
        f1 struct/$sub | sort -u >> aur/pkgname
        f2 struct/$sub | sort -u >  pkg/$sub

        # Query dependencies (f2) not in the known list.
        target=$(grep -Fxvf pkg/n pkg/$sub | url)

        if [[ $target ]]; then            
            curl_safe "$target" > raw/$a
        else
            break
        fi

        cat struct/$sub >> struct/n

        if [[ $(count raw/$a) -lt 1 ]]; then
            break
        else
            cat pkg/$sub >> pkg/n
        fi
    done

    if ((a > 30)); then
        error "$argv0: total requests: $((++a)) (out of range)"
        exit 34
    fi

    # Validate tsort data (#87)
    if datamash -W check < struct/n >/dev/null; then
        tsort struct/n | tac
    else
        error "$argv0: invalid argument"
        exit 22
    fi
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

if ((!$#)); then
    error "usage: $argv0 pkgname [pkgname...]"
    exit 1
fi

# Save temporary files in directories by context.
if ! cd "$tmp" || ! mkdir {aur,pkg,struct,raw}; then
    exit
fi

# Generate dependency tree.
chain "$@" > aur/tree

# Warn on packages missing in both official repositories and AUR (#67)
grep -Fxvf aur/pkgname <(aursift -S < aur/tree) | while read -r p; do
    warning "no results found for $p"
done

# XXX: Packages without lib32 prefix are not necessarily in the AUR.
grep -Fxf aur/pkgname aur/tree | awk -v arch="$(uname -m)" '{
    if(arch == "i686") {
        gsub(/^lib32-/,"")
        gsub(/^gcc-multilib$/,"")
    };  print
}'

# vim: set et sw=4 sts=4 ft=sh:

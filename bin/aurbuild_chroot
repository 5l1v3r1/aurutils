#!/bin/bash
set -e
readonly argv0=aurbuild_chroot
readonly PATH=/bin:/usr/bin
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

machine=$(uname -m)
directory=/var/lib/aurbuild/$machine
makepkg_conf=/usr/share/devtools/makepkg-$machine.conf
pacman_conf=/usr/share/devtools/pacman-extra.conf

declare -a makechrootpkg_args=(-cu)
declare -i update_root=0

conf_devtools() {
    printf '[options]\n'

    pacconf --config="$1" --options --raw
    printf '#CacheDir=\n'

    pacconf --repo-list | while IFS= read -r; do
        printf '[%s]\n' "$REPLY"
        pacconf --repo="$REPLY" --raw
    done
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    printf >&2 -- '%s\n' "$argv0: aurbuild_chroot [-CMrU] -- <ARGS>"
    exit 1
}

readonly -f conf_devtools trap_exit usage

while getopts :C:D:M:U: OPT; do
    case $OPT in
        C) pacman_conf=$OPTARG  ;;
        D) directory=$OPTARG    ;;
        M) makepkg_conf=$OPTARG ;;
        U) database=$OPTARG
           update_root=1        ;;
        *) usage                ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if (($#)); then
    makechrootpkg_args=("$@")
fi

readonly pacman_conf makepkg_conf directory database prepare

trap 'trap_exit' EXIT
tmp=$(mktemp -d)

if ((update_root)); then
    conf_devtools "$pacman_conf" > "$tmp"/pacman.conf

    if [[ -f $directory/root/.arch-chroot ]]; then
        # locking is done by systemd-nspawn
        arch-nspawn -C "$tmp"/pacman.conf -M "$makepkg_conf" \
            "$directory"/root pacman -Syu --noconfirm   
    else
        install -d "$directory" -m 755 -v || exit
        mkarchroot  -C "$tmp"/pacman.conf -M "$makepkg_conf" \
            "$directory"/root base-devel
    fi

    # Check if target repository is configured in chroot (#161)
    pacconf --sysroot="$directory"/root --repo="$database" >/dev/null
else
    PKGDEST="${PKGDEST:-$PWD}" makechrootpkg \
        -r "$directory" "${makechrootpkg_args[@]}"
fi

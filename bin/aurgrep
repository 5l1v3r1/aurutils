#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

argv0=aurgrep
aurweb="https://aur.archlinux.org"
cache="${XDG_CACHE_HOME:-$HOME/.cache}/$argv0"
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX) || exit

readonly argv0 aurweb cache tmp

declare -i delay=300

# $1: .gz archive (URI)
# $2: .gz archive (name)
fetch() {
    if curl -sS "$1" -o "$2"; then
        gunzip -f "$2"
    else
        exit
    fi
}

# $1: .gz archive (URI)
sync_list() {
    #global delay
    declare gz=${1##*/}
    declare un=${gz%.*}

    declare stamp_l stamp_r epoch_l epoch_r

    if [[ -f $un ]]; then
        # Use HTTP date to compare the generation date (first line).
        # https://bugs.archlinux.org/task/49092
        read -r stamp_l < <(awk -F', ' '{print $3; exit}' "$un")
        read -r stamp_r < <(curl -fsSI "$1" | awk -F', ' '/^Date:/ {print $2}')
        read -r epoch_l < <(date -d "$stamp_l" '+%s')
        read -r epoch_r < <(date -d "$stamp_r" '+%s')

        # The update interval is set to 5 minutes by default.
        # https://lists.archlinux.org/pipermail/aur-dev/2016-May/004036.html
        if ((epoch_r - epoch_l > delay)); then
            fetch "$1" "$gz"
        fi
    else
        fetch "$1" "$gz"
    fi
}

while getopts :bt OPT; do
    case $OPT in
        b|+b) pkgbase=1     ;;
        t|+t) delay=$OPTARG ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((pkgbase)); then
    list=pkgbase.gz
else
    list=packages.gz
fi

# Operations are done in the cache directory, unless said otherwise.
mkdir -p     "$cache"
chmod -c 700 "$cache"
cd "$cache" || exit

# Takes an URI to a compressed package list
sync_list "$aurweb/$list" || exit

# Remove the generation date before matching.
if ! grep -P -- "$1" <(tail -n +2 "${list%.*}"); then
    error "$argv0: no matches found"
    exit 1
fi

#!/bin/bash
readonly argv0=aurgrep
readonly aurweb='https://aur.archlinux.org'
readonly cache=${XDG_CACHE_HOME:-$HOME/.cache}/$argv0
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

# https://lists.archlinux.org/pipermail/aur-dev/2016-May/004036.html
declare -i delay=300
declare    list=packages

extract_head() {
    sed -n '1p' "$1"
    sed -i '1d' "$1"
}

list_update() {
    if curl -fsS "$aurweb/$1".gz -o - | gzip -d - > "$1"; then
        extract_head "$1" | awk -F', ' '{print $3}'
    else
        printf >&2 '%s\n' 'warning: failed to retrieve package list'
    fi
}

list_date_remote() {
    curl -fsSI "$aurweb/$1".gz | awk -F', ' 'tolower($1) ~ /^date:/ {print $2}'
}

readonly -f extract_head list_update list_date_remote

while getopts :bt OPT; do
    case "$OPT" in
        b) list=pkgbase  ;;
        t) delay=$OPTARG ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

mkdir -p "$cache"
chmod -c 700 "$cache"
cd "$cache" || exit

if [[ -s $list && -s timestamp ]]; then
    epoch_l=$(date -f timestamp '+%s')
    epoch_r=$(list_date_remote "$list" | date -f - '+%s')

    if ((epoch_l)) && ((epoch_r)) && ((epoch_r - epoch_l > delay)); then
        list_update "$list" > timestamp
    fi
else
    list_update "$list" > timestamp
fi

pcregrep "$@" "$list"

# vim: set et sw=4 sts=4 ft=sh:

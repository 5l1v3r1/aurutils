#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
argv0=aursift

readonly PS4 argv0

# Takes a set of package names to create "package virtual" pairs, querying
# both provides and replaces fields.
provides() {
    expac '%n %R %S' -Sv "$@" | awk '{
        for(i = 2; i <= NF; ++i) {
	    printf("%s\t%s\n", $1, $i) | "sort -u"
	}
    }'
}

# Read package names from stdin separated by the IFS and produces a list of
# packages not provided in the official repositories.
sift() {
    declare -A pkgset
    declare all siftargs query repo p v

    # Use an additional indexed array to preserve input order.
    while read -r p; do
        pkgset["$p"]=1
        all+=("$p")
    done

    if [[ ${pkgset[@]} ]]; then
        for p in "${!pkgset[@]}"; do
            siftargs+=(--satisfies="$p")
        done
    else
        error "$argv0: no data available"
        exit 61
    fi

    for p in testing core extra community community-testing multilib multilib-testing; do
        siftargs+=(--repo="$p")
    done

    # Close standard input for pacsift to allow --sync.
    # https://github.com/andrewgregory/pacutils/issues/3
    query=($(pacsift --sync --exact "${siftargs[@]}" <&-))

    if [[ ${query[@]} ]]; then
        while read -r p v; do
            p=${p#*/}

            if [[ ${pkgset[$p]} ]]; then
                repo+=("$p")
            fi
 
            if [[ ${pkgset[$v]} ]]; then
                plain "virtual dependency $v provided by $p"
                repo+=("$v")
            fi
        done < <(provides "${query[@]}")
    else
        msg2 "No matches in the official repositories"
    fi

    # Print the relative complement between repo provided dependencies and all
    # required dependencies. all \ repo
    grep -Fxvf <(printf '%s\n' "${repo[@]}") <(printf '%s\n' "${all[@]}")
}

# Read "pkgname pkgver" strings from stdin, find and compare
# repository versions, and print updated packages on stdout.
prepare() {
    declare name ver check
    declare -A in repo

    while read -r name ver; do
        in[$name]=$ver
    done

    if [[ ${!in[@]} ]]; then
        declare server
        server=$(pacconf --single --repo="$1" Server) || exit
        server=${server#*://}

        while read -r name ver; do
            if [[ ${in[$name]} ]]; then
                repo[$name]=$ver
            else
                continue
            fi
        done < <(repose -lr "$server" "$1")
    else
        error "$argv0: no data available"
        exit 61
    fi

    for name in "${!in[@]}"; do
        if [[ ${repo[$name]} ]]; then
            check=$(vercmp "${repo[$name]}" "${in[$name]}")
        else
            check=-1 # FS#49093
        fi

        case "$check" in
            -1) msg2 "$name ${repo[$name]:-0} -> ${in[$name]}" ;;
            0)  printf '%s\n' "$name" ;;
            1)  warning "$name ${repo[$name]:-0} is newer than ${in[$name]}"
                printf '%s\n' "$name" ;;
        esac
    done
}

source /usr/share/makepkg/util.sh || exit

if [[ -t 2 ]]; then
    colorize
fi

while getopts :SU: OPT; do
    case $OPT in
        S) sift    ;;
        U) prepare "$OPTARG" ;;
        *) plain "usage: $argv0 [-S pkgname] [-U pkgname pkgver]"
           exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# vim: set et sw=4 sts=4 ft=sh:

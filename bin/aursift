#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

readonly argv0=aursift

# Takes a set of package names to create "package virtual" pairs, querying
# both provides and replaces fields.
provides() {
    expac '%n %R %S' -S "$@" | awk '{
        for(i = 2; i <= NF; ++i) { print $1, $i | "sort -u" }
    }'
}

# Read package names from stdin separated by the IFS and produces a list of
# packages not provided in the official repositories.
sift() {
    declare -A pkgset
    declare all siftargs query repo n p r v

    while read -r p; do
        pkgset["$p"]=1
        all+=("$p")
    done

    if [[ ! ${pkgset[@]} ]]; then
        error "$argv0: no data available"
        exit 61
    fi

    for p in "${!pkgset[@]}"; do
        siftargs+=(--satisfies="$p")
    done

    for r in testing core extra community community-testing multilib multilib-testing; do
        siftargs+=(--repo="$r")
    done

    # Close standard input for pacsift to allow --sync.
    # https://github.com/andrewgregory/pacutils/issues/3
    query=($(pacsift --sync --exact "${siftargs[@]}" <&-))

    if [[ ${query[@]} ]]; then
        for p in "${query[@]#*/}"; do
            if [[ ${pkgset[$p]} ]]; then
                repo+=("$p")
            else
                n+=("$p")
            fi
        done
    else
        msg2 "No matches in the sync database"
    fi

    if [[ ${n[@]} ]]; then
        while read -r p v; do
            if [[ ${pkgset[$v]} ]]; then
                plain "virtual dependency $v provided $p"
                repo+=("$v")
            fi
        done < <(provides "${n[@]}")
    fi

    # Print the relative complement between repo provided dependencies and all
    # required dependencies. all \ repo
    grep -Fxvf <(printf '%s\n' "${repo[@]}") <(printf '%s\n' "${all[@]}")
}

# Read "pkgname pkgver" strings from stdin, find and compare
# repository versions, and print updated packages on stdout.
prepare() {
    declare name ver siftargs check
    declare -A aur repo

    while read -r name ver; do
        aur[$name]=$ver
    done

    if [[ ! ${!aur[@]} ]]; then
        error "$argv0: no data available"
        exit 61
    fi

    while read -r name ver; do
        repo[$name]=$ver
    done < <(expac -S '%n %v' "${!aur[@]}")

    for name in "${!aur[@]}"; do
        if [[ ${repo[$name]} ]]; then
            check=$(vercmp "${repo[$name]}" "${aur[$name]}")
        else
            # vercmp '' foo => 1 (#20)
            check=-1
        fi

        case "$check" in
            -1) msg2 "$name ${repo[$name]:-0} -> ${aur[$name]}" ;;
            0)  msg "$name is up-to-date"
                printf '%s\n' "$name" ;;
            1)  warning "$name ${repo[$name]:-0} is newer than ${aur[$name]}"
                printf '%s\n' "$name" ;;
        esac
    done
}

source /usr/share/makepkg/util.sh || exit

[[ -t 2 ]] && colorize

while getopts :SU OPT; do
    case $OPT in
        S|+S) sift    ;;
        U|+U) prepare ;;
        *)    plain "usage: $argv0 [+-SU} [--] ARGS..."
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

#!/bin/bash
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
readonly argv0=aurfetch
readonly aurweb='https://aur.archlinux.org'
set -e

declare -i aurball=0 log=0

clone() {
    declare -r log=$1 logdir=$2 startdir=$PWD

    while IFS= read -r; do
        if [[ -d $REPLY/.git ]]; then
            cd_safe "$REPLY"

            git fetch -v # returns 0 even if nothing was fetched

            if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
                if ((log)) && [[ -d $logdir ]]; then
                    git --no-pager log --patch --stat '..@{upstream}' >> "$logdir/$REPLY".patch
                fi

                git reset --hard HEAD
                git merge
            fi

            cd_safe "$startdir"
        else
            git clone "$aurweb/$REPLY".git
        fi
    done
}

# stdin: /path/to/a.tar.gz
snapshot() {
    declare -r gzdir=$1 startdir=$PWD
    cd_safe "$gzdir"

    if type -P aria2c >/dev/null 2>&1; then
        aria2c --stderr=true -i -
    elif type -P parallel >/dev/null 2>&1; then
        parallel --will-cite -X -j +5 --nice 10 --halt soon,fail=1 \
		curl -fLsS --remote-name-all --cert-status {}
    else
        xargs -I{} curl -fLsS --remote-name-all --cert-status {}
    fi

    declare a
    cd_safe "$startdir"

    for a in "$gzdir"/*.tar.gz; do
        tar xvf "$a"
    done
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-L logdir] [-t]"
    exit 1
}

source /usr/share/makepkg/util.sh

if [[ -t 2 ]]; then
    colorize
fi

while getopts :L:t OPT; do
    case $OPT in
        L) log=1; logdir=$OPTARG ;;
        t) aurball=1 ;;
        *) usage ;;
    esac
done

tmp=$(mktemp -dt "$argv0".XXXXXXXX)
trap 'trap_exit' EXIT

if ((aurball)); then
    xargs printf "$aurweb/%s\n" | snapshot "$tmp"
else
    clone "${log:-0}" "${logdir:-/dev/null}"
fi

# vim: set et sw=4 sts=4 ft=sh:

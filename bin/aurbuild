#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=aurbuild
basedir=$PWD
machine=$(uname -m)
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX)

declare -r PS4 argv0 basedir machine tmp
declare -i chroot=0 sign_pkg=0

gpg_args=(--verbose --detach-sign --no-armor)
makechrootpkg_args=(-cnu)
makepkg_args=(-Lcrs)
repose_args=(-fv)

trap_exit() {
    #global tmp
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    #global argv0
    plain "usage: $argv0 [-cs] -d <database> [-Capr] [--] <makepkg args>"
}

conf_build() {
    printf '[options]\n'
    pacconf --raw --options

    while IFS= read -r; do
        printf '[%s]\n' "$REPLY"
        pacconf --raw --repo="$REPLY"
    done
}

db_replaces() {
    #global root
    bsdcat "$root/$1".db | awk '/%REPLACES%/ {
        while(NF != 0) {getline; print}
    }'
}

trap 'exit' INT
trap 'trap_exit' EXIT
source /usr/share/makepkg/util.sh

if [[ -t 2 ]]; then
    colorize
fi

while getopts a:cC:d:p:r:s OPT; do
    case $OPT in
        a) queue=$OPTARG      ;;
        c) chroot=1           ;;
        C) container=$OPTARG  ;;
        d) database=$OPTARG   ;;
        p) pool=$OPTARG       ;;
        r) root=$OPTARG       ;;
        s) repose_args+=(-s)
           sign_pkg=1         ;;
        *) usage; exit 1      ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# Reset option array if arguments are specified after --
if (($#)); then
    if ((chroot)); then
        makechrootpkg_args=("$@")
    else
        makepkg_args=("$@")
    fi
fi

if [[ $GPGKEY ]]; then
    gpg_args+=(-u "$GPGKEY")
fi

if [[ $queue ]]; then
    if [[ -r $queue && ! -d $queue ]]; then
        exec {fd}< "$queue"
    else
        error "$argv0: queue: must be a readable file"
        exit 13
    fi
else
    # http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11
    exec {fd}<<< '//'
fi

if [[ $database ]]; then
    printf '%s\n' "$database" | conf_build > "$tmp"/custom.conf
else
    error "$argv0: database: missing argument"
    usage; exit 1
fi

if [[ $root ]]; then
    root=$(realpath -e -- "$root")
else
    root=$(pacconf --single --repo="$database" Server)
    root=${root#*://}
fi

if [[ ! -w $root/ || ! -r $root/ ]]; then
    error "$argv0: $root: Permission denied"; exit 13
fi

if [[ $pool ]]; then
    pool=$(realpath -e -- "$pool")
else
    pool=$root
fi

if [[ ! -w $pool/ || ! -r $pool/ ]]; then
    error "$argv0: $pool: Permission denied"; exit 13
fi

if ((chroot)); then
    container=${container:-/var/lib/aurbuild}/$machine
    makepkg_conf=/usr/share/devtools/makepkg-$machine.conf
    pacman_conf=/usr/share/devtools/pacman-extra.conf

    pacconf --repo-list | conf_build > "$tmp"/pacman.conf

    if [[ -f $container/root/.arch-chroot ]]; then
        sudo arch-nspawn \
            -C "$tmp"/pacman.conf -M "$makepkg_conf" \
            "$container"/root pacman -Syu --noconfirm
    else
        sudo install -d "$container" -m 755 -v
        sudo mkarchroot \
            -C "$tmp"/pacman.conf -M "$makepkg_conf" \
            "$container"/root base-devel
    fi

    # Check if target repository is configured in chroot (#161)
    pacconf --root="$container"/root --repo="$database" >/dev/null
fi

while read -r -u "$fd" pkg _; do
    cd_safe "$basedir/$pkg"

    if ((chroot)); then
        sudo PKGDEST="$pool" makechrootpkg \
            -d "$pool" -d "$root" \
            -r "$container" "${makechrootpkg_args[@]}"
    else
        PKGDEST="$pool" LC_MESSAGES=C makepkg "${makepkg_args[@]}"
    fi

    if ((sign_pkg)); then
        # https://bugs.archlinux.org/task/49946
        for p in $(makepkg --packagelist); do
            find "$pool" -type f -regex ".+/$p.pkg.+?" -execdir gpg "${gpg_args[@]}" {} \;
        done
    fi

    # https://bugs.archlinux.org/task/49342
    LANG=C repose -r "$root" -p "$pool" "$database" "${repose_args[@]}"

    if ! ((chroot)); then
        # https://github.com/andrewgregory/pacutils/issues/15
        replaces=$(grep -Fxf <(db_replaces "$database") <(pacman -Qq) | paste -s -d, -)

        # https://github.com/andrewgregory/pacutils/issues/4
        sudo pacman -Syu --config="$tmp"/custom.conf --ignore="$replaces" --noconfirm
    fi
done

exec {fd}<&-

# vim: set et sw=4 sts=4 ft=sh:

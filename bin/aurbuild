#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=aurbuild
base=$PWD
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX)

readonly PS4 argv0 base tmp
declare -i chroot=0 sign_pkg=0 err=0

makepkg_args=(-Lcrs)
makechrootpkg_args=(-cu)
repose_args=(-vf)

build_local() {
    #global database pool root makepkg_args repose_args sign_pkg
    if ((sign_pkg)); then
        makepkg_args+=(--sign)
    fi

    PKGDEST="$pool" LC_MESSAGES=C makepkg "${makepkg_args[@]}"

    # Set LANG=C to allow libalpm to fully read the database, even
    # when the locale is not set.
    # https://bugs.archlinux.org/task/49342#comment147145
    LANG=C repose "${repose_args[@]}" "$database" -r "$root" -p "$pool"

    printf '%s\n%s\n' "[$database]" "$(pacconf --repo="$database")" > "$tmp"/config
    sudo pacman -Syu --config="$tmp"/config --noprogressbar
}

build_chroot() {
    #global HOME GNUPGHOME GPGKEY CHROOT pool root makechrootpkg_args repose_args database
    declare p gpgargs

    # makechrootpkg does not support GNUPGHOME. (#151)
    if [[ ${GNUPGHOME:-$HOME/.gnupg} != $HOME/.gnupg ]]; then
        warning "GNUPGHOME is not set to $HOME/.gnupg"
    fi

    # makechrootpkg load_vars() reads PKGDEST from /etc/makepkg.conf,
    # _if_ this variable was not set already. Similarly, when not in
    # /etc/makepkg.conf, it is read from ~/.makepkg.conf.  Note that
    # variables specified on the command line are subject to sudo
    # policy; without the ALL privilege, setenv or SETENV: is
    # required.  See sudo(8) and sudoers(5) for details.
    sudo PKGDEST="$pool" makechrootpkg -d "$pool" -d "$root" -r "$CHROOT" "${makechrootpkg_args[@]}"

    # Using pinentry inside the chroot fails due to DISPLAY and GPG_TTY
    # not being set; sign packages manually. (#130)
    if ((sign_pkg)); then
        gpgargs=(--verbose --detach-sign --no-armor)

        if [[ $GPGKEY ]]; then
            gpgargs+=(-u "$GPGKEY")
        fi

        for p in $(makepkg --packagelist); do
            find "$pool" -type f -regex ".+/$p.pkg.+?" -execdir gpg "${gpgargs[@]}" {} \;
        done
    fi

    LANG=C repose "${repose_args[@]}" "$database" -r "$root" -p "$pool"
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-cs] -a <queue> -d <repo> -p <pool> -r <root> [--] ARGS"
    exit 1
}

trap 'exit' INT
trap 'trap_exit' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts a:cd:p:r:s OPT; do
    case $OPT in
        a|+a) queue="$OPTARG" ;;
        c|+c) chroot=1 ;;
        d|+d) database="$OPTARG" ;;
        p|+p) pool="$OPTARG" ;;
        r|+r) root="$OPTARG" ;;
        s|+s) repose_args+=(--sign)
              sign_pkg=1 ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

for arg in queue database pool root; do
    if [[ ! ${!arg} ]]; then
        error "$argv0: $arg: missing argument"
        err=1
    fi
done

((err)) && usage

# Canonicalize paths to avoid relative path issues (#130)
pool=$(realpath -e "$pool")
root=$(realpath -e "$root")

if [[ ! -r $queue ]]; then
    error "$argv0: permission denied ($queue)"
    exit 13
elif [[ -d $queue ]]; then
    error "$argv0: is a directory ($queue)"
    exit 21
elif [[ ! -w $root ]]; then
    error "$argv0: $root: permission denied"
    exit 13
elif [[ ! -w $pool ]]; then
    error "$argv0: $pool: permission denied"
    exit 13
elif [[ ! -d $root ]]; then
    error "$argv0: $root: not a directory"
    exit 20
elif [[ ! -d $pool ]]; then
    error "$argv0: $pool: not a directory"
    exit 20
elif ! pacconf --repo="$database" >/dev/null; then
    exit 22
fi

# Reset option array if arguments are specified after --
if (($#)); then
    if ((chroot)); then
        makechrootpkg_args=("$@")
    else
        makepkg_args=("$@")
    fi
fi

if ((chroot)); then
    CHROOT=/var/lib/aurbuild

    if [[ ! -d $CHROOT/root ]]; then
        pacconf --raw > "$tmp"/pacman.conf
        sudo install -d "$CHROOT"
        sudo mkarchroot -C "$tmp"/pacman.conf "$CHROOT"/root base base-devel
    else
        # since makechrootpkg restores the user chroot to the state from root chroot
        # base and base-devel packages are reupdated before each package build
        # this updates the root once before starting package build process to prevent that
        sudo arch-nspawn "$CHROOT"/root pacman -Syu --noconfirm
    fi
fi

# Read from FD 3 to choose providers with makepkg (#21)
exec 3< "$queue"

while read -r -u 3 pkg _; do
    if cd "$base/$pkg"; then
        if ((chroot)); then
            build_chroot
        else
            build_local
        fi
    fi
done

exec 3<&-

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=aurbuild
base=$PWD
machine=$(uname -m)
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX)

declare -r PS4 argv0 base machine tmp
declare -i chroot=0 sign_pkg=0

gpg_args=(--verbose --detach-sign --no-armor)
makechrootpkg_args=(-cu)
makepkg_args=(-Lcrs)
repose_args=(-fv)

conf_build() {
    declare repo

    printf '[options]\n'
    pacconf --raw --options

    while IFS= read -r repo; do
        printf '[%s]\n' "$repo"
        pacconf --raw --repo="$repo"
    done
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-cs] -d <database> -a <queue> [-Cmpr] [--] ARGS"
}

trap 'exit' INT
trap 'trap_exit' EXIT
source /usr/share/makepkg/util.sh

if [[ -t 2 ]]; then
    colorize
fi

while getopts a:cC:d:m:p:r:s OPT; do
    case $OPT in
        a) queue=$OPTARG     ;;
        c) chroot=1          ;;
        C) container=$OPTARG ;;
        d) database=$OPTARG  ;;
        p) pool=$OPTARG      ;;
        r) root=$OPTARG      ;;
        s) repose_args+=(-s)
           sign_pkg=1        ;;
        *) usage; exit 1     ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# Reset option array if arguments are specified after --
if (($#)); then
    if ((chroot)); then
        makechrootpkg_args=("$@")
    else
        makepkg_args=("$@")
    fi
fi

if [[ $GPGKEY ]]; then
    gpg_args+=(-u "$GPGKEY")
fi

if [[ $database ]]; then
    pacconf --repo="$database" >/dev/null
else
    error "$argv0: database: missing argument"
    usage; exit 1
fi

if [[ $queue ]]; then
    if [[ -r $queue && ! -d $queue ]]; then
        exec 3< "$queue"
    else
        error "$argv0: queue: must be a readable file"
        exit 13
    fi
else
    error "$argv0: queue: missing argument"
    usage; exit 1
fi

if [[ $root ]]; then
    root=$(realpath -e -- "$root")
else
    root=$(pacconf --single --repo="$database" Server)
    root=${root#*://}
fi

if [[ $pool ]]; then
    pool=$(realpath -e -- "$pool")
else
    pool=$root
fi

printf '\n' > "$root"/_build
printf '\n' > "$pool"/_build

if ((chroot)); then
    container=${container:-/var/lib/aurbuild}/$machine

    if pacconf --repo=multilib >/dev/null 2>&1 && [[ $machine != x86_64 ]]; then
        pacconf --repo-list | grep -vx multilib | conf_build > "$tmp"/pacman.conf
    else
        # pacstrap (called from mkarchroot) fails when config file contains DBPath (#166)
        pacconf --raw > "$tmp"/pacman.conf
    fi

    if [[ -f $container/root/.arch-chroot ]]; then
        sudo arch-nspawn "$container"/root pacman -Syu --noconfirm
    else
        sudo install -d "$container"
        sudo mkarchroot -C "$tmp"/pacman.conf "$container"/root base-devel
    fi

    # Check if target repository is configured in chroot (#161)
    pacconf --root="$container"/root --repo="$database" >/dev/null
fi

while read -r -u 3 pkg _; do
    cd_safe "$base/$pkg"

    if ((chroot)); then
        sudo PKGDEST="$pool" makechrootpkg -d "$pool" -d "$root" -r "$container" "${makechrootpkg_args[@]}"
    else
        PKGDEST="$pool" LC_MESSAGES=C makepkg "${makepkg_args[@]}"
    fi

    if ((sign_pkg)); then
        # https://bugs.archlinux.org/task/49946
        for p in $(makepkg --packagelist); do
            find "$pool" -type f -regex ".+/$p.pkg.+?" -execdir gpg "${gpg_args[@]}" {} \;
        done
    fi

    # https://bugs.archlinux.org/task/49342
    LANG=C repose "${repose_args[@]}" "$database" -r "$root" -p "$pool"

    if ! ((chroot)); then
        printf '%s\n' "$database" | conf_build > "$tmp"/config
        sudo pacman -Sy --config="$tmp"/config

        # https://github.com/andrewgregory/pacutils/issues/15
        replaces=$(grep -Fxf <(pacsift --repo="$database" | expac -S '%R' -) <(expac -Q '%n') | paste -s -d, -)

        # https://github.com/andrewgregory/pacutils/issues/4
        sudo pacman -Su --config="$tmp"/config --ignore="$replaces" --noconfirm
    fi
done

exec 3<&-

# vim: set et sw=4 sts=4 ft=sh:

#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=aurbuild
pwd=$PWD
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX)

readonly argv0 pwd tmp
declare -i chroot=0 sign=0

# Use an option array to allow later modification by getopts.
mkpkg_args=(-crs)
mkchr_args=(-cu)
rps_args=(-vf)

# Using pinentry inside the chroot fails due to DISPLAY and GPG_TTY
# not being set. Use a separate function to always sign packages
# outside the chroot. (#130)
sign_pkg() {
    #global pool GPGKEY
    declare gpgargs i

    gpgargs=(--verbose --detach-sign --no-armor)

    if [[ $GPGKEY ]]; then
        gpgargs+=(-u "$GPGKEY")
    fi

    for i in $(makepkg --packagelist); do
        find "$pool" -type f -regex ".+/$i.pkg.+?" -execdir gpg "${gpgargs[@]}" {} \;
    done
}

# The repo equivalent of "makepkg -i". An interesting side effect is
# that pacman now considers packages inside the official repositories
# as "local", and warns if they are newer than a custom counterpart.
build_local() {
    #global database pool root mkpkg_args

    PKGDEST="$pool" LC_MESSAGES=C makepkg "${mkpkg_args[@]}"
    repose "${rps_args[@]}" "$database" -r "$root" -p "$pool"

    printf '%s\n%s\n' "[$database]" "$(pacconf --repo="$database")" > "$tmp"/config
    sudo pacman -Syu --config="$tmp"/config
}

# With an nspawn container, packages are always built against latest
# official packages, and are upgraded together on a local -Syu.  As
# '/pkgdest' is hardcoded in makechrootpkg, packages are rebuilt even
# if already available.
build_chroot() {
    #global CHROOT database pool root mkchr_args

    # Skip verification checks in the chroot instance as .gnupg paths
    # are hardcoded in makechrootpkg. Signatures are still verified
    # outside the chroot. Preserve PKGDEST with sudo -E, see FS#44827.
    sudo -E PKGDEST="$pool" makechrootpkg "${mkchr_args[@]}" -d "$pool" -d "$root" -r "$CHROOT" -- --skippgpcheck
    repose "${rps_args[@]}" "$database" -r "$root" -p "$pool"
}

trap 'exit' INT
trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts a:cd:p:r:s OPT; do
    case $OPT in
        a|+a) queue="$OPTARG"    ;;
        c|+c) chroot=1           ;;
        d|+d) database="$OPTARG" ;;
        p|+p) pool="$OPTARG"     ;;
        r|+r) root="$OPTARG"     ;;
        s|+s) rps_args+=(--sign)
              sign=1             ;;
        *) plain "usage: $argv0 [-cs] -a <queue> -d <db> -p <pool> -r <root> [--] ARGS"
           exit 1 ;;
    esac
done

# Check for blank arguments besides missing ones.
re_blank='^[[:space:]]*$'

if [[ $queue =~ $re_blank || $database =~ $re_blank || $pool =~ $re_blank || $root =~ $re_blank ]]; then
    error "$argv0: missing arguments"
    exit 1
fi

if [[ ! -r $queue ]]; then
    error "$argv0: $queue: permission denied"
    exit 13
fi

if ! pacconf --repo="$database" >/dev/null; then
    exit 22
fi

# Canonicalize paths to avoid issues with chdir and relative paths.
pool=$(realpath -e "$pool")
root=$(realpath -e "$root")

# Pass all arguments after -- to makepkg/makechrootpkg.
if ((chroot)); then
    mkchr_args+=("${@:$OPTIND}")
else
    mkpkg_args+=("${@:$OPTIND}")
fi

if ((chroot)); then
    CHROOT=/var/lib/aurbuild

    if [[ ! -d $CHROOT/root ]]; then
        sudo install -d "$CHROOT"
        sudo mkarchroot "$CHROOT"/root base base-devel
    fi

    # Retrieve settings from pacman.conf and Include directives.
    pacconf --raw > "$tmp"/pacman.conf
    sudo cp -v "$tmp"/pacman.conf "$CHROOT"/root/etc/pacman.conf
fi

# Read from FD 3 to choose providers with makepkg (#21)
exec 3< "$queue"

while read -r -u 3 pkg _; do
    if cd "$pwd/$pkg"; then
        if ((chroot)); then
            build_chroot
        else
            build_local
        fi

        if ((sign)); then
            sign_pkg
        fi
    fi
done

exec 3<&-

# vim: set et sw=4 sts=4 ft=sh:

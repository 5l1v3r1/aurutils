#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=aurbuild
pwd=$PWD
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX)

readonly PS4 argv0 pwd tmp
declare -i chroot=0 sign=0

# Use an option array to allow later modification by getopts.
makepkg_args=(-Lcrs)
makechrootpkg_args=(-cu)
repose_args=(-vf)

# Using pinentry inside the chroot fails due to DISPLAY and GPG_TTY
# not being set. Use a separate function to always sign packages
# outside the chroot. (#130)
sign_pkg() {
    #global pool GPGKEY
    declare gpgargs i

    gpgargs=(--verbose --detach-sign --no-armor)

    if [[ $GPGKEY ]]; then
        gpgargs+=(-u "$GPGKEY")
    fi

    for i in $(makepkg --packagelist); do
        find "$pool" -type f -regex ".+/$i.pkg.+?" -execdir gpg "${gpgargs[@]}" {} \;
    done
}

# The repo equivalent of "makepkg -i". An interesting side effect is
# that pacman now considers packages inside the official repositories
# as "local", and warns if they are newer than a custom counterpart.
build_local() {
    #global database pool root makepkg_args repose_args

    PKGDEST="$pool" LC_MESSAGES=C makepkg "${makepkg_args[@]}"

    # Set LANG=C to allow libalpm to fully read the database, even
    # when the locale is not set.
    # https://bugs.archlinux.org/task/49342#comment147145
    LANG=C repose "${repose_args[@]}" "$database" -r "$root" -p "$pool"

    printf '%s\n%s\n' "[$database]" "$(pacconf --repo="$database")" > "$tmp"/config
    sudo pacman -Syu --config="$tmp"/config --noprogressbar
}

# * With an nspawn container, packages are always built against latest
#   official packages, and are upgraded together on a local -Syu.
# * As '/pkgdest' is hardcoded in makechrootpkg, packages are rebuilt even
#   if already available.
build_chroot() {
    #global CHROOT database pool root makechrootpkg_args repose_args

    # Preserve PKGDEST with sudo -E. (#120)
    sudo -E PKGDEST="$pool" makechrootpkg "${makechrootpkg_args[@]}" -d "$pool" -d "$root" -r "$CHROOT"

    # makechrootpkg does not support GNUPGHOME. (#151)
    if [[ ${GNUPGHOME:-$HOME/.gnupg} != $HOME/.gnupg ]]; then
        warning "GNUPGHOME is set to a non-standard path"
    fi

    LANG=C repose "${repose_args[@]}" "$database" -r "$root" -p "$pool"
}

trap_exit() {
    if [[ ! $- =~ x ]]; then
        rm -rf "$tmp"
    fi
}

trap 'exit' INT
trap 'trap_exit' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts a:cd:p:r:s OPT; do
    case $OPT in
        a|+a) queue="$OPTARG"    ;;
        c|+c) chroot=1           ;;
        d|+d) database="$OPTARG" ;;
        p|+p) pool="$OPTARG"     ;;
        r|+r) root="$OPTARG"     ;;
        s|+s) sign=1             ;;
        *) plain "usage: $argv0 [-cs] -a <queue> -d <repo> -p <pool> -r <root> [--] ARGS"
           exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if [[ ! $queue || ! $database || ! $pool || ! $root ]]; then
    error "$argv0: empty arguments"
    exit 1
fi

if [[ ! -r $queue ]]; then
    error "$argv0: \'$queue\': permission denied"
    exit 13
fi

if ! pacconf --repo="$database" >/dev/null; then
    exit 22
fi

# Canonicalize paths to avoid issues with chdir and relative paths.
pool=$(realpath -e "$pool")
root=$(realpath -e "$root")

# Reset option array if arguments are specified after --
if (($#)); then
    if ((chroot)); then
        makechrootpkg_args+=("$@")
    else
        makepkg_args+=("$@")
    fi
fi

if ((sign)); then
    repose_args+=(--sign)
fi

if ((chroot)); then
    CHROOT=/var/lib/aurbuild

    if [[ ! -d $CHROOT/root ]]; then
        sudo install -d "$CHROOT"
        sudo mkarchroot "$CHROOT"/root base base-devel
    else
        # since makechrootpkg restores the user chroot to the state from root chroot
        # base and base-devel packages are reupdated before each package build
        # this updates the root once before starting package build process to prevent that
        sudo arch-nspawn "$CHROOT"/root pacman -Syu --noconfirm
    fi

    # Retrieve settings from pacman.conf and Include directives.
    pacconf --raw | sudo tee "$CHROOT"/root/etc/pacman.conf > /dev/null
fi

# Read from FD 3 to choose providers with makepkg (#21)
exec 3< "$queue"

while read -r -u 3 pkg _; do
    if cd "$pwd/$pkg"; then
        if ((chroot)); then
            build_chroot
        else
            build_local
        fi

        if ((sign)); then
            sign_pkg
        fi
    fi
done

exec 3<&-

# vim: set et sw=4 sts=4 ft=sh:
